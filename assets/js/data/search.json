[ { "title": "Photomap 개발 기록", "url": "/posts/photomap-%EA%B0%9C%EB%B0%9C-%EA%B8%B0%EB%A1%9D/", "categories": "Project, Photomap", "tags": "Network, DPDK, HFT", "date": "2025-05-13 03:18:00 +0000", "snippet": "Photomap 개발 기록작년 여름부터, photomap이라는 웹 플랫폼을 만들고 있다.쉽게 말하면, 사진가들이 자신들이 찍은 사진을 지도 기반으로 공유할 수 있는 플랫폼이다. 항상 사진을 찍을 때마다 어디로가서 어떤 사진을 찍을 지 고민이 많았는데, 사진가들끼리 지도 기반으로 공유할 수 있는 플랫폼이 있으면 좋겠다는 생각을 해서 개인 프로젝트로 만들...", "content": "Photomap 개발 기록작년 여름부터, photomap이라는 웹 플랫폼을 만들고 있다.쉽게 말하면, 사진가들이 자신들이 찍은 사진을 지도 기반으로 공유할 수 있는 플랫폼이다. 항상 사진을 찍을 때마다 어디로가서 어떤 사진을 찍을 지 고민이 많았는데, 사진가들끼리 지도 기반으로 공유할 수 있는 플랫폼이 있으면 좋겠다는 생각을 해서 개인 프로젝트로 만들게 되었다.현재 aws lightsail을 사용해서 배포한 상태인데, free tier가 끝나가서 어떻게 할 지 고민 중이다.메인 지도에 있는 사진을 클릭하면, 사진이 포함된 글의 상세 페이지로 이동한다.그리고 글을 새로 생성하기 위해서는 지도를 클릭하면 된다.이 글에서는 간단하게 photomap의 개발 기록을 남기려고 한다.1. 프로젝트 구조아주 간단하게 프로젝트 구조를 정리해보았다.프론트와 백엔드 서버 모두 하나의 EC2 인스턴스에서 실행되고, 이미지 업로드/다운로드는 S3를 사용한다.2. 백엔드Github: photomap-backend백엔드로는 Django를 사용했다.기능을 구현하는 데 그치지 않고, 시스템 구조나 프레임워크를 선택할 때마다 항상 “이게 최선일까?”라는 질문을 던지며 진행했다. 각 선택지의 장단점을 분석하고, 배운 시스템 지식을 바탕으로 최적의 방식을 선택하려고 노력했다. 특히 배포를 한 이후에는 서버 성능 최적화에 많은 시간을 쏟았는데,병목이 발생할 수 있는 부분을 2가지로 생각하고 최적화를 진행했다.2-1. 사진 업로드/압축 파이프라인사용자가 사진을 업로드하면, 백엔드에서 해당 사진을 프리뷰/일반/확대 버전의 3가지 크기로 압축하고 S3에 저장해야 했다.초기에는 이 작업이 동기적으로 처리되어 API 응답 시간이 길어지는 문제가 있었고, 유저가 무한정 대기하는 상황이 발생할 수 있었습니다.이를 해결하기 위해 Celery와 Redis를 도입해 비동기 처리 방식으로 전환했고, 업로드 상태는 SSE(Server-Sent Events)를 통해 실시간으로 클라이언트에 전달되도록 구성했고, 덕분에 사용자 경험과 서버 응답성이 모두 개선되었다.2-2. 메인 지도 api플랫폼의 특성상, 메인 페이지에 있는 세계지도에 유저들의 사진 위치 마커를 요청하는 api의 호출이 가장 많을 것으로 판단하고 최적화를 진행했다.기존에는 단순히 모든 사진의 마커를 반환하는 방식으로 api를 구성했지만 이 방식으로는 사진이 늘어남에 따라 유저의 브라우저와 서버 모두 너무 부담이 커질 것으로 생각했ek. 그래서 총 2가지 방법으로 변경을 했는데, 세계 지도를 grid로 나누고, grid 마다 최대 일정 개수까지의 마커만을 반환 grid 단위로 redis로 캐시를 하고, DB도 spatial index를 가지면 grid방식과 잘 어울릴 것 같아서 PostgresSQL의 PostGIS 확장을 사용해서 쿼리 성능을 향상시켰다.그래서 메인 지도 api의 변경 전과 후를 비교 테스트를 했는데,개선 전개선 후locust라는 api 로드 테스트툴을 사용해서, 서버에 dummy 사진 data 500개를 생성해두고, 20개의 user로 load test를 진행했다. 로드가 최고에 도달했을때 이전 방식에서는 평균적으로 9000ms 정도에서 평균 2000ms 로 매우 성능이 향상됬고, rps, 초당 request도 2 → 10으로 매우 향상될 수 있었다.3. 프론트엔드Github: photomap-frontend프론트엔드는 next.js를 사용했다.그리고 ui 제작을 위해 shadcn/ui와 tailwindcss를 사용했다.shadcn/ui는 react 컴포넌트 라이브러리로, tailwindcss를 기반으로 하여 빠르게 UI를 구성할 수 있도록 도와준다.shadcn/ui는 컴포넌트의 스타일을 tailwindcss로 작성할 수 있어, 매우 유연하게 커스터마이징할 수 있다. 또한, shadcn/ui는 컴포넌트의 상태를 관리하기 위한 훅을 제공하여, 상태 관리가 용이하다.그리고 지도는 openstreemap을 사용했다.4. 배포Github: photomap-deploy배포는 aws lightsail을 사용했다.그리고 docker를 사용하여 백엔드와 프론트엔드를 컨테이너화하고, nginx를 리버스 프록시로 사용하여 두 서비스를 연결했다.Free tier가 끝나면, 월 13달러정도의 비용이 발생하는데, 현재로서는 이 정도 비용은 감당할 수 있을 것 같다.5. 향후 계획몇가지 생각하고 있는게 있는데, oauth2를 사용한 로그인 기능 추가 메인페이지에 지도와 마커만 보여주는게 아니라, 현재 보여주고 있는 마커들의 사진들을 인스타처럼 모아서 보여주기 위치기반으로 현재 내 주변의 사진들을 보여주는 기능 추가 모바일 최적화 프론트엔드 코드 리팩토링" }, { "title": "DPDK 사용기(1)", "url": "/posts/DPDK-%EC%82%AC%EC%9A%A9%EA%B8%B0(1)/", "categories": "Project, DPDK", "tags": "Network, DPDK, HFT", "date": "2025-05-13 03:18:00 +0000", "snippet": "1. 배경Developing High-Frequency Systems을 우연히 읽다가, HFT 시스템에서 지연을 최소화하기 위해, Kernel bypass와 zero-copy를 사용해야 한다는 것을 알게 되었다. (참고로 저 책은 별로 추천안함)Kernel bypass란 말 그대로 커널을 우회하여 사용자 공간에서 직접 하드웨어에 접근하는 기술이다. 네...", "content": "1. 배경Developing High-Frequency Systems을 우연히 읽다가, HFT 시스템에서 지연을 최소화하기 위해, Kernel bypass와 zero-copy를 사용해야 한다는 것을 알게 되었다. (참고로 저 책은 별로 추천안함)Kernel bypass란 말 그대로 커널을 우회하여 사용자 공간에서 직접 하드웨어에 접근하는 기술이다. 네트워크를 최적화할 때 가장 많이 사용되는 기술인데, 기존에는 NIC는 packet을 수신하면 interrupt를 발생시켜 커널에 알리고, 커널은 이를 처리하여 사용자 공간으로 전달하는 방식이었다. 이 과정에서 많은 오버헤드가 발생하게 된다. Kernel bypass는 이러한 과정을 우회하여 NIC와 사용자 공간 간의 직접적인 데이터 전송을 가능하게 한다.Zero-copy는 데이터 복사를 최소화하여 성능을 향상시키는 기술이다. 일반적으로 네트워크 패킷을 수신하면, NIC에서 커널로 복사되고, 다시 사용자 공간으로 복사되는 과정이 필요하다. 이 과정에서 많은 CPU 사이클과 메모리 대역폭이 소모된다. Zero-copy는 이러한 복사를 최소화하여 성능을 향상시킨다.2. DPDK2-1. DPDK란?DPDK는 Data Plane Development Kit의 약자로, Intel에서 개발한 오픈소스 라이브러리이다. DPDK는 고성능 패킷 처리 애플리케이션을 개발하기 위한 프레임워크로, 주로 네트워크 장비 및 서버에서 사용된다. DPDK는 CPU와 NIC(네트워크 인터페이스 카드) 간의 데이터 전송을 최적화하여 높은 성능을 제공한다.가장 대표적인 기능은, 위의 사진 처럼 Kernel을 거치지 않고 user가 직접 NIC에 접근할 수 있도록 해주는 것이다. 이를 PMD(Polled Mode Driver)라고 한다. 구체적으로는 user가 NIC에 새로운 패킷이 올 때까지 polling을 하여 패킷을 즉각적으로 처리할 수 있도록 해준다. 이로 인해, interrupt를 발생시키는 오버헤드를 줄일 수 있다.또한, DPDK는 메모리 관리, 멀티스레딩, CPU 코어 관리 등 다양한 기능을 제공하여 고성능 패킷 처리 애플리케이션을 개발하는 데 필요한 모든 기능을 지원한다. DPDK는 Intel CPU에서 최적화되어 있지만, ARM 및 PowerPC 아키텍처에서도 사용할 수 있다.DPDK는 다양한 NIC 드라이버를 지원하며, Intel, Mellanox, Broadcom 등 다양한 제조업체의 NIC을 지원한다. DPDK는 또한 다양한 프로토콜 스택을 지원하여, TCP/IP, UDP/IP, MPLS 등 다양한 프로토콜을 처리할 수 있다. DPDK는 고성능 패킷 처리 애플리케이션을 개발하는 데 필요한 모든 기능을 제공하며, 대규모 데이터 센터 및 클라우드 환경에서 널리 사용되고 있다.2-2. 구성요소DPDK Docs를 참고하여 아주 최소한으로 DPDK의 주요 구성요소를 정리해보았다. EAL(Execution Abstraction Layer): DPDK의 핵심 구성 요소로, DPDK 애플리케이션이 하드웨어 리소스에 접근할 수 있도록 해준다. EAL은 CPU, 메모리, NIC 등 하드웨어 리소스를 관리하고, DPDK 애플리케이션이 하드웨어 리소스에 접근할 수 있도록 해준다. EAL은 DPDK 애플리케이션이 하드웨어 리소스를 효율적으로 사용할 수 있도록 최적화되어 있다. PMD(Polled Mode Driver): DPDK의 NIC 드라이버로, NIC와 DPDK 애플리케이션 간의 데이터 전송을 최적화한다. PMD는 NIC에서 수신한 패킷을 DPDK 애플리케이션으로 전달하고, DPDK 애플리케이션에서 전송한 패킷을 NIC로 전달한다. PMD는 polling 방식으로 동작하여, interrupt를 발생시키지 않고 패킷을 처리할 수 있다. mbuf: DPDK의 메모리 버퍼로, DPDK 애플리케이션이 패킷을 처리하는 데 사용되는 메모리 블록이다. mbuf는 패킷의 헤더와 페이로드를 저장하는 데 사용되며, DPDK 애플리케이션이 패킷을 처리하는 데 필요한 모든 정보를 저장한다. mbuf는 DPDK 애플리케이션이 패킷을 처리하는 데 필요한 모든 정보를 저장하며, DPDK 애플리케이션이 패킷을 처리하는 데 필요한 모든 기능을 제공한다.그래서 위의 사진처럼, EAL을 통해 DPDK 애플리케이션의 시작, 종료, 메모리 관리, NIC 연결 등을 수행하고, PMD를 통해 NIC와 DPDK 애플리케이션 간의 데이터 전송을 최적화한다. 그리고 애플리케이션과 NIC는 mbuf를 통해 데이터를 주고받는다.2-3. 사용 예시DPDK Ecosystem에서 DPDK를 사용하는 다양한 프로젝트를 확인할 수 있다.3. DPDK 사용기3-1. 설치우선 DPDK를 쓰는 이유가 Kernel bypass와 zero-copy를 사용하기 위함이므로, DPDK를 설치하기 전에 NIC가 DPDK(특히 PMD)를 지원하는지 확인해야 한다. DPDK는 Intel, Mellanox, Broadcom 등 다양한 제조업체의 NIC을 지원한다. DPDK를 지원하는 NIC은 DPDK Supported NICs에서 확인할 수 있다.근데 내 컴퓨터의 NIC는 PMD를 지원안해서, NIC를 새로 사야하나 고민하다가, aws의 EC2의 NIC가 PMD를 지원한다고 하여 aws EC2를 사용하기로 했다.하드웨어는 t3 medium을 사용하고, OS는 ubuntu 22.04를 사용했다.# DPDK 설치sudo apt-get updatesudo apt install -y build-essential meson ninja-build \\ python3-pyelftools libnuma-dev libpcap-devgit clone git@github.com:DPDK/dpdk.git# DPDK 빌드cd dpdkmeson setup buildcd buildninja이렇게 하면 build는 끝난다.그리고 이제 주 목표인 PMD를 설정해주어야 하는데, PMD는 Kernel에서 NIC를 user로 뺏어오는 것이기에, ssh로 접속한 상태에서 PMD를 설정하면 그냥 ssh가 끊긴다(해보진 않았는데 아마 그럴듯). 그래서 PMD용 NIC를 위해 ec2에 별도의 NIC를 추가해주었다.그래서 처음에는,ubuntu@ip-172-31-13-20:~/dpdk-stable-24.11.2/usertools$ sudo ./dpdk-devbind.py --statusNetwork devices using kernel driver===================================0000:00:05.0 'Elastic Network Adapter (ENA) ec20' if=ens5 drv=ena unused= *Active*이런식으로 하나만 나왔는데,Network devices using kernel driver===================================0000:00:05.0 'Elastic Network Adapter (ENA) ec20' if=ens5 drv=ena unused= *Active*0000:00:06.0 'Elastic Network Adapter (ENA) ec20' if=ens6 drv=ena unused= *Active*하나를 더 추가해주었다.그리고 PMD를 사용하는 방식이 크게 두 가지가 있는데, UIO VFIOUIO는 사용자 공간에서 NIC를 제어할 수 있도록 해주는 드라이버로, DPDK에서 가장 많이 사용되는 드라이버이다. UIO는 커널 모드와 사용자 모드 간의 전환이 필요하므로, 성능이 떨어질 수 있다.VFIO는 커널 모드와 사용자 모드 간의 전환이 필요하지 않으므로, 성능이 더 좋다. 하지만 VFIO는 UIO보다 설정이 복잡하고, ec2 t3 medium에서는 지원하지 않는다. 그래서 UIO를 사용하기로 했다.#uio 설치git clone https://dpdk.org/git/dpdk-kmodspushd dpdk-kmods/linux/igb_uiosudo makesudo depmod &amp;&amp; sudo insmod igb_uio.kopopd# PMD 설정sudo ./dpdk-devbind.py --bind=igb_uio 0000:00:06.0여기까지 하면,ubuntu@ip-172-31-13-20:~/dpdk-stable-24.11.2/usertools$ sudo ./dpdk-devbind.py --statusNetwork devices using DPDK-compatible driver============================================0000:00:06.0 'Elastic Network Adapter (ENA) ec20' drv=igb_uio unused=enaNetwork devices using kernel driver===================================0000:00:05.0 'Elastic Network Adapter (ENA) ec20' if=ens5 drv=ena unused=igb_uio *Active*이런식으로 PMD가 설정된 것을 확인할 수 있다.그리고 DPDK를 사용하기 위해서는 hugepage를 설정해주어야 한다.# hugepage 설정sudo mkdir -p /mnt/hugepgsudo mount -t hugetlbfs -o pagesize=1G none /mnt/hugepgecho 512 | sudo tee /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepagesubuntu@ip-172-31-13-20:~/dpdk-stable-24.11.2/build$ cat /proc/meminfo | grep HugePagesAnonHugePages: 0 kBShmemHugePages: 0 kBFileHugePages: 0 kBHugePages_Total: 512HugePages_Free: 512HugePages_Rsvd: 0HugePages_Surp: 0원래는 1Gb짜리 hugepage를 만들려고 했는데, t3 medium의 메모리가 4Gb라서 512 x 2Mb짜리 hugepage를 만들었다.여기까지 하면 DPDK를 사용할 준비가 끝났다!!3-2. Hello World# Hello Worldsudo ./dpdk-helloworld -c 0x3 --socket-mem 1024 --huge-dir=/dev/hugepages --allow 0000:00:06.0옵션의 의미는 다음과 같다. -c: CPU 코어 마스크를 설정한다. 0x3은 2개의 코어를 사용하겠다는 의미이다. –socket-mem: 소켓 메모리를 설정한다. 1024는 1Gb의 메모리를 사용하겠다는 의미이다. –huge-dir: hugepage가 마운트된 디렉토리를 설정한다. /dev/hugepages는 hugepage가 마운트된 디렉토리이다. –allow: PMD를 설정한 NIC의 PCI 주소를 설정한다. 0000:00:06.0은 PMD를 설정한 NIC의 PCI 주소이다.3-3. further studyDPDK를 사용해서 web socket client를 만들어보려고 한다.그리고 web socket client를 만들어서 최종적으로는 HFT용 Local Order Book을 만들어보려고 한다.일단 문제는, DPDK는 Layer 2에서 동작하기 때문에, Layer 3인 TCP/IP를 사용하기 위해서는 DPDK위에서 TCP/IP 스택을 구현해야 한다.DPDK는 TCP/IP 스택을 구현하기 위한 라이브러리를 제공하지 않기 때문에, 직접 구현해야 한다. 근데 그건 미친짓이고, 어떻게 잘 포팅한다고 해도 성능이 안나올 수 있기에, 다른 라이브러리들을 찾아봤다.찾아본 라이브러리는 다음과 같다. dpdk-ans F-Stack다음 글에서는 DPDK를 사용해서 web socket client를 만드는 과정을 정리해보려고 한다." }, { "title": "라즈베리 파이로 Syncthing 서버 만들기", "url": "/posts/Syncthing-Server/", "categories": "Project, Syncthing", "tags": "", "date": "2025-03-17 02:24:00 +0000", "snippet": "배경개발을 여러 환경에서 하다보면, 소스코드 관리가 꽤 골칫거리가 된다.현재 밖에서는 맥북에어, 집에서는 리눅스 데스크탑으로 개발을 하고 있다. 학교에서 맥북으로 작업하다가, 집에서는 우분투로 해야하니 파일 동기화가 필요해졌다.이전에도 비슷한 상황들이 있었는데, 그때는 우분투가 아닌 맥-윈도우 간의 동기화만 신경쓰면 됐어서, 그냥 구글 드라이브/원드라...", "content": "배경개발을 여러 환경에서 하다보면, 소스코드 관리가 꽤 골칫거리가 된다.현재 밖에서는 맥북에어, 집에서는 리눅스 데스크탑으로 개발을 하고 있다. 학교에서 맥북으로 작업하다가, 집에서는 우분투로 해야하니 파일 동기화가 필요해졌다.이전에도 비슷한 상황들이 있었는데, 그때는 우분투가 아닌 맥-윈도우 간의 동기화만 신경쓰면 됐어서, 그냥 구글 드라이브/원드라이브 동기화로 해결을 했었다. 그렇지만 우분투와같은 리눅스 환경에서는 일반적인 상용 드라이브를 사용하기가 어렵고, 외부 플랫폼에 의존하지 않는게 좋은 것 같아서, 집에있는 라즈베리파이를 활용해서 동기화 서버를 만들어보기로 하였다.SyncThing이러한 상황에서 사용할 수 있는 다양한 솔루션들이 있는데, 그 중에서 Syncthing을 골랐다. 그 이유는 무료, 오픈소스 가볍다 대용량 파일 공유가 아닌 소스코드 중심으로 동기화를 할 것이라 nas 정도의 시스템은 필요가 없었다. 개발자가 사용하기에 적합한 기능들(Ignore 기능, 버전 관리 기능 등등)Syncthing의 가장 큰 특징은, 동기화하는 기기들간에 P2P방식으로 동기화를 지원한다는 점이다.그렇기에 동기화하는 기기들이 모두 작동중인 경우면 문제가 되지 않지만, 한쪽이 작동중이 아니면 동기화가 되지 않는다.그러면 예를들어 학교에서 맥북으로 작업을 하다가, 집에 들어와서 데스크탑으로 작업을 이어나가려면, 데스크탑을 켠 후 맥북을 다시 켜서동기화가 될 때까지 기다리는 시간이 필요해진다…이런 문제점을 해결하기 위해, 항상 켜두고 있는 라즈베리 파이를 맥북과 데스크탑 사이의 동기화를 지원하는 중계 서버로 활용하기로 했다.이렇게하면, 한쪽 기기에서 파일 변경을 했을 때 다른 기기가 꺼져 있어도, 변경 사항은 라즈베리파이에 저장되었다가, 다른 기기가 켜지면 그때 바로 동기화가 진행된다.셋업셋업은 사실 진짜 간단하다. 그냥 다운로드 링크에서 운영체제와 아키텍쳐에 맞는 버전을 다운받고, 다운이 끝나고 실행하면, http://127.0.0.1:8384/이 주소로 Syncthing UI를 확인할 수 있다.이 곳에서 어떤 기기와 동기화를 할 것인지, 그리고 어떤 디렉토리를 동기화 할 것인지를 선택할 수 있다.좀 더 자세한 설명은 유튜브를 참고하면 될 것 같다.그리고 공식 Doc 링크도 참고디렉토리 별로 설정을 고를 수 있는데, 위와 같이 Ignore 패턴을 지정할 수도 있고, 파일 버전 관리 방식도 설정 할 수 있다. 중요한 파일의 경우, 파일 버저닝을 활성화하는 것을 추천한다.아무래도 3개 기기 간에 동기화를 진행하면, 파일이 간혹가다 꼬이는 경우가 존재한다.Syncthing이 좋은 점이 P2P 방식인데, 당연히 NAT Traversal도 알아서 해주고,내부망으로 연결하다가 외부망으로 옮겨도, 연결이 유지가 잘 된다. 근데 아마도 동기화하는 두 기기 중 어느 한쪽은 기존의 공인 IP가 변경되지 않아야할 것 같긴하다. 지금 설정의 경우 라즈베리파이의 IP가 고정이기 때문에, 맥북의 IP가 바뀌어도 맥북에서 라즈베리파이의 IP를 사용해서 연결을 재개하는 듯 하다.Troubleshooting구성을하다가 생겼던 약간의 문제점들을 정리해본다.라즈베리 파이 설정라즈베리 파이에 우분투 server 버전을 받은 상태여서, Syncthing UI를 라즈베리파이 내에서 볼 수가 없었다.ssh로 연결해서 라즈베리 파이를 활용하고 있는 상황이었고, 라즈베리파이의 http://127.0.0.1:8384/를 접속하기 위해,Syncthing config 파일에서 UI 주소를 http://0.0.0.0:8384/ 로 변경했다. 이렇게하면, 같은 내부망에서는 8384포트로 라즈베리 파이의 UI를 볼 수 있었다. 물론 UI말고도 config파일 만으로도 모든 설정이 가능한 것 같기는 한데, 자신이 없어서 이렇게 우회 방식을 선택했다.그리고 이렇게 하면 약간의 보안 문제가 발생할 수 있는데, Syncthing UI 자체에 암호를 걸 수 있어서 이걸로 해결을 했다.iCloud 동기화현재 맥북과 아이폰, 아이패드 사이의 동기화는 아이클라우드를 사용하고 있다. 대충 강의 ppt, 악보, 그리고 옵시디언도 아이클라우드에 들어가 있다.그래서 Syncthing 동기화 디렉토리에 아이클라우드 파일들도 포함하려고 했는데, 처음에 약간 헤매는 과정이 있었다.문제였던것은, Syncthing의 아이클라우드 디렉토리 접근권한과, 아이클라우드의 ‘다운로드 유지’ 옵션이었다.우선 Syncthing이 아이클라우드에 접근할 수 있도록, 맥의 설정에서 개인정보 보호 및 보안 &gt; 전체 디스크 접근 권한 에서 syncthing을 추가해야 한다.이렇게만해두고 syncthing UI에 들어가면 무슨 lock과 관련된 에러가 엄청 뜨는데, 아이클라우드 내에서 동기화를 할 디렉토리들을 다운로드 항목 유지를 해줘야한다. 다행히 디렉토리를 그렇게 설정해주면 하위 파일들은 모두 그 설정이 반영이 되니 그렇게 하면 아이클라우드도 잘 동기화가 된다.성능처음에 구성을 했을 때, 초기 동기화해야하는 데이터 사이즈가 약 20GB 정도 있었다.한 2시간 정도 걸렸던 것 같고, 아무래도 대용량 파일 보다는 자잘하게 작은 파일들이 매우 많아서, 동기화가 꽤 오래걸렸던 것 같다.용량이 큰 파일의 경우 속도는 부족하지 않게 나온다.초기 동기화를 하면서, 라즈베리파이의 온도를 계속 지켜봤는데, 70도까지 오르는 것을 보면서 약간 마음이 아팠다.라즈베리 파이 4B, 램 2GB 모델을 사용하고 있는데, 기존에 사진 웹 사이트를 돌리고 있던거에 Syncthing 까지 추가를 하니 약간 버거워하는 것 같았다.그래도 이걸 위해, 라즈베리파이의 microsd를 32에서 128로 올려주긴 했다." }, { "title": "WebRTC 내용 정리", "url": "/posts/WebRTC-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/", "categories": "Network, WebRTC", "tags": "", "date": "2025-01-12 02:00:00 +0000", "snippet": "방학동안 WebRTC를 사용해서 프로젝트를 진행했는데, 그때 공부한 WebRTC 관련 내용을 정리해보려고 한다.사실 처음에는 그냥 실시간 통신을 위해서 많이 사용하는 기술이라서 무지성으로 적용을 했다. 개념만 간단히 이해하고 코드를 작성하는데, 이게 뭔가 작동하기는 하는데 이게 맞는지 의문점이 많이 들어서 공부를 깊게 해보았다. 공부하면 할수록 꽤 깊...", "content": "방학동안 WebRTC를 사용해서 프로젝트를 진행했는데, 그때 공부한 WebRTC 관련 내용을 정리해보려고 한다.사실 처음에는 그냥 실시간 통신을 위해서 많이 사용하는 기술이라서 무지성으로 적용을 했다. 개념만 간단히 이해하고 코드를 작성하는데, 이게 뭔가 작동하기는 하는데 이게 맞는지 의문점이 많이 들어서 공부를 깊게 해보았다. 공부하면 할수록 꽤 깊게 파보면 좋은 내용들이 있어서 정리해보려고 한다. 참고 자료1. WebRTC란?1-1. 기본 개념“웹 어플리케이션, 사이트 등이 중간자 없이 서로 영상, 오디오 등의 미디어와 데이터를 교환할 수 있도록 하는 기술”여기서 가장 중요한 것은, 중간자 없이 라는 것이다. 기존의 인터넷 통신은 대부분 사용자 사이에 서버를 두고, 이 서버가 데이터를 중개하는 역할을 한다. 이는 기존의 웹 통신 구조 상 가장 기본적이고 편리한 방법이지만, 실시간으로 빠르게 통신해야하는 상황에서, 이 서버를 거치는것은 불필요한 오버헤드가 된다.물론 기존의 웹 통신 구조에서, 이와같은 P2P 채널을 여는것은 그리 간단하지만은 않다. 아래에서 살펴보겠지만, P2P 채널 셋업을 위해 NAT Traversal을 위한 별도의 서버(STUN or TURN)이 있어야하고, Signaling을 위한 서버(Signal Server)가 있어야한다. 아무튼 이러한 P2P 통신을 위한 준비 절차와 통신 규약을 규정한 것이 WebRTC라는 기술이고, 결국 중간자를 없애기 위해, Connection Setup과정에서 약간의 Overhead를 감수하는 그런 기술이 된다.따라서 주로 WebRTC는 한번 연결하면 비교적 오랜 기간 동안 계속 연결을 유지하는, 그런 application에서 적합하다.1-2. WebRTC 통신 FlowWeb RTC 통신을 위해 필요한 절차들이다. 위에서 말했듯, 여러개의 서버가 필요하며 약간 복잡하다. 그렇지만, 이 준비과정만 끝나면, Peer간의 데이터 전송 방법은 아주 간단하다.위의 과정은, 설정과 환경에 따라 약간의 차이는 있지만, 아주 기본적인 순서는 아래와 같다. A와 B는 STUN Server, 또는 TURN Server를 사용하여, 자신의 ICE Candidate를 수집 A가 B에게 Offer(SDP)를 전송 B가 A에게 Answer(SDP)를 전송 ICE Candidate를 교환 ICE Connectivity Check, Establish WebRTC 통신 시작(2→3, 그리고 4→5만 서로 순서가 상관이 있고, 나머지는 서로간에 순서가 바뀌거나 병렬적으로 수행될 수 있다.)1-3. NAT TraversalWebRTC에서 P2P 통신을 준비하는 과정에서, 가장 처음 부딪히는 문제는, 각 Peer가 자신의 IP 주소(공인 IP)를 모른다는 점이다.일반적인 환경에서, 인터넷에 접속할때 NAT를 통해 공인 IP를 획득하고, 서버는 이 공인 IP로 답장을 보낸다. NAT는 호스트 외부의 라우터에서 일어나는 일임으로, 호스트가 관여할 수 없고 일반적인 방법으로 자신의 공인 IP를 알기는 어렵다. 문제는 P2P를 위해서는 상대가 나의 공인 IP를 알아야한다는 것인데, 나도 모른다는것이다…google의 What’s my ip그래서 이렇게 외부 서버를 사용해서, 자신이 어떤 공인 IP를 할당받았는지 확인하는 과정이 필요해진다. 이렇게 외부에 서버를 두고, 요청을 날려서 IP를 물어보면 될것 같은 간단한 문제처럼 보이지만, 이것은 NAT 설정과 방화벽 등에 의해서 꽤 어려운 문제가 된다.이 부분에 제대로 된 설명은 NAT아무튼 외부 서버를 사용하여 자신의 공인 IP를 획득하는 것을 NAT Traversal이라고 하고, 이를 위해 사용되는 서버가 STUN 또는 TURN이다.STUN은 아주 기본적으로 구글의 what’s my ip처럼 자신의 공인 IP를 알려주는 역할을 하고, TURN은 Symmetric NAT등으로 P2P 통신 자체가 불가능한 상황에서, 데이터를 중개하는 서버 역할을 한다. 따라서 TURN을 사용하면 WebRTC이지만, 결과적으로는 P2P 통신이 아니게 된다.이런 과정을 통해, 각 peer는 ICE(Interactive Connectivity Establishment) Candidate라는 것을 얻게 된다. 이는 Local Address : 클라이언트의 사설 주소(Host Candidate), 랜과 무선랜 등 다수 인터페이스가 있으면 모든 주소가 후보가 됨 Server Reflexive Address : NAT 장비가 매핑한 클라이언트의 공인망 주소로 STUN에 의해 판단한다.(Server Reflexive Candidate) Relayed Address : TURN서버가 패킷 릴레이를 위해 할당하는 주소(Relayed Candidate)  이 세가지 종류로 구성된다. 그리고 이렇게 자신의 ICE Candidate 얻은 후, 자신의 정보를 상대방에게 전송해야하는데, 문제는 여전히 상대방의 IP는 모른다는 문제가 있다…이를 위해서 Signal Server라는 중간 서버(서로 기존에 협의된)를 사용하여 ICE Candidate를 교환하게 된다.그리고 상대방의 ICE Candidate로, 최적의 통신 설정을 결정해서 ICE Candidate pair를 결정한다.1-3. SDP각 peer가 셋업 과정에서 공유하는 정보는 ICE Candidate 뿐만이 아니다. 결국 최종적인 목표는 실시간으로 원하는 데이터를 주고받는 것인데, 이를 위해서는 사전에 어떤 형식의 데이터를 주고받을 것인지, 그리고 데이터 통신 채널을 몇개 만들 것인지, 등등의 협의가 필요하다.이를 위해서, SDP(Session Description Protocol) 라는 패킷을 서로 교환하는 과정을 거친다. SDP란?그리고 SDP는 서로에게 한번씩 보내는데, 보내는 순서는 사전에 협의가 되어있어야 한다.위의 도식에서, A가 Offer SDP를 보내면, 이를 B가 확인하고 Answer SDP를 보낸다.그리고 여기서 약간 헷갈릴 수 있는데, SDP에는 데이터 형식과 개수 뿐만 아니라, 위의 NAT Traversal로 얻은 ICE Candidate도 포함될 수 있다.가장 기본적인 상황은 ICE Candidate를 전부 수집한 후, 자신의 SDP(Candiate를 포함시켜)를 보내는 것이다. 다만 ICE Candidate는 경우에 따라 여러개의 서버를 사용하여 delay가 꽤 생길 수 있으므로, 자신의 SDP를 보내기 전, 또는 후에 ICE Candidate를 SDP와 별개로 주고받을 수도 있다. 이를 Trickle ICE라고 한다.아무튼, B가 Answer SDP를 보내면, 기본적으로 WebRTC를 위한 셋업은 거의 끝났다고 생각하면 된다.1-4. Signal Server위에서 언급했듯이 셋업 과정에서 SDP와 ICE Candidate를 보내기 위해 사전에 협의된 별도의 서버가 있어야한다고 했는데, 이를 Signal Server라고 부른다. 그리고 이렇게 Signal Server를 통해 데이터를 주고받으며 WebRTC 통신 셋업을 하는 과정을 Signaling이라고 한다.WebRTC의 다른 부분들과 달리, Signal Server에 대한 명시적인 스펙은 존재하지 않는다.그래서 STUN이나 TURN 서버는 구글에서도 제공해주는 것과 달리, Signal Server는 보통 직접 구현하고, 각 peer에서 그 Signal Server의 스펙에 맞게 통신을 하게 된다. 물론 Signal Server를 만드는 것은 그리 어렵지 않고, 그냥 peer와 어떻게 통신할 지 정해만 두고 그 스펙을 구현하기만 되기에 어떻게 구현하는 상관이 없다.정말 naive하게는 그냥 http 통신을 하도록 구현해도 되고, mqtt, websocket, 등등 아무거나 편한 프로토콜을 사용하면 된다. 그치만 편의상 websocket을 많이 사용하기는 하는 듯 하다. Signal Server에게 A가 Offer를 보내면, Server는 B에게 Offer를 전달한다. Signal Server에게 B가 Answer를 보내면, Server는 A에게 Answer를 전달한다. Trickle ICE를 사용한다면, A와 B의 ICE Candidates 도 전달이렇게가 전부이고, 각 peer가 필요한 메시지를 전부 전송/수신 했다고 판단하면, Signal Server로 부터 연결을 해제하면 된다.2. WebRTC 구현프로젝트 내에서 WebRTC를 어떻게 구현했는지, 간략하게 적어보겠다.2-1. Signal ServerSignal Server Github이 레포를 참고하여, socket io 기반으로 Signal Server를 만들었다. socket io가 처음이라면Socket io Doc을 읽어보자.// MESSAGING LOGICio.on(\"connection\", (socket) =&gt; { console.log(\"User connected with id\", socket.id);\t... socket.on(\"message\", (message) =&gt; { // Send message to all peers expect the sender socket.broadcast.emit(\"message\", message); }); socket.on(\"messageOne\", (message) =&gt; { // Send message to a specific targeted peer const { target } = message; const targetPeer = connections[target]; if (targetPeer) { io.to(targetPeer.socketId).emit(\"message\", { ...message }); } else { console.log(`Target ${target} not found`); } });\t...서버 코드는 아주 단순하다. 이렇게 message 이벤트가 발생하면, target Peer를 찾아서 그 peer에게 message를 전달하는 역할만 하면 된다.const io = require(\"socket.io-client\");// This is a bare minimum example of how one might setup a signaling channel as a classclass SignalingChannel { constructor(peerId, signalingServerUrl, token) { this.peerId = peerId; this.socket = new io(signalingServerUrl, { auth: { token }, autoConnect: false, reconnection: false, }); this.onMessage = () =&gt; {}; } connect() { this.socket.on(\"connect\", () =&gt; { console.log(\"Connected with id\", this.socket.id); this.socket.emit(\"ready\", this.peerId); }); this.socket.on(\"disconnect\", () =&gt; { console.log(\"Disconnected\"); }); this.socket.on(\"connect_error\", (error) =&gt; { console.log(\"Connection error\", error.message); }); this.socket.on(\"message\", this.onMessage); this.socket.on(\"uniquenessError\", (message) =&gt; { console.error(`Error: ${message.error}`); // process.exit(1); }); this.socket.connect(); } send(message) { this.socket.emit(\"message\", { from: this.peerId, target: \"all\", message }); } sendTo(targetPeerId, message) { this.socket.emit(\"messageOne\", { from: this.peerId, target: targetPeerId, message }); } disconnect() { if (this.socket) { this.socket.disconnect(); } }}module.exports = SignalingChannel;그리고 각 peer는 이 Signaling Channel 클래스를 사용하여,connect → sendTo → .on(“message”) → disconnect등의 흐름을 거쳐 Signaling을 끝내게 된다.실제 프로젝트에서는 Server 코드와 Signaling Channel 코드를 수정해서 사용하였다. 이 코드만 잘 이해해도 Signal Server 만드는 것은 문제가 없을 것이다.2-2. SignalingSignaling을 하기 위해서는, 우선 먼저 위에서 만든 Signaling Channel을 만들고, Signal Server에게 connect 이벤트를 보내야 한다.그리고 webRTC 연결을 관리하는 클래스를 만들어야하는데, 이는 RTCPeerConnection 이란 js에 들어있는 클래스를 사용하면 된다.정확한 스펙은 PeerConnection Doc WebRTC를 사용하고자 한다면, 꼭 읽어보자…const signal = SignalingChannel(SIGNAL_SERVER_URL,...);signal.connect();const config = {\ticeServers : {\t\t[{\t\t\turls: STUN_SERVER_URL,\t\t\tusername: STUN_SERVER_USER,\t\t\tcredential: STUN_SERVER_PASSWORD,\t\t},]\t}}const pc = RTCPeerConnection(config);pc.addTrack(...); //Media Channelpc.createDataChannel(...); //Data Channelconst offer = await pc.createOffer();const localDescription = await pc.setLocalDescription(offer);signal.sendTo(\"B\", localDescription);const answerHandler = (message) =&gt; {\tconst remoteDesctiption = await pc.setRemoteDescription(message);}Offer 쪽에서 정말 필요한 부분만 추출한 코드이다. 아무튼 대략적인 순서는, Signal Server 연결 RTCPeerConnection 생성 Media Channel, Data Channel 생성 Offer 생성, 전송 Answer 수신 WebRTC 통신 시작그리고 프로젝트에서 한쪽은 js, 다른쪽은 python으로 작성했는데, python에서 RTCPeerConnection같은 모듈은, aiortc를 사용하면 된다.2-3. Media Channel과 Data Channel이 채널들을 생성하는 것이 WebRTC의 최종적인 목표이다.위의 코드에서 처럼,pc.addTrack(...); //Media Channelconst dataChannel = pc.createDataChannel(...); //Data Channel이렇게 해주면 생성이 되고,dataChannel.send(data);이런식으로 데이터를 보낼 수 있다.그리고 채널을 생성할 때, 괸련된 이벤트 핸들러를 만들 수 있다(만들어야 한다).dataChannel.onopen = () =&gt; { console.log('Data channel is open'); // 연결이 열리면 메시지를 보낼 수 있습니다. dataChannel.send('Hello from client!');};dataChannel.onclose = () =&gt; { console.log('Data channel is closed');};dataChannel.onerror = (error) =&gt; { console.log('Data channel error:', error);};dataChannel.onmessage = (event) =&gt; { console.log('Received message:', event.data); // 데이터 수신 처리};이런 식으로, 핸들러를 만들어서 채널이 열리고, 닫히고, 메시지가 오는 등의 이벤트에 대해서 처리를 해줄 수 있다.사실 WebRTC의 목표상 가장 중요한 코드이고, 비즈니스 로직은 이 핸들러에 연계되어 나타날 것이다.3. 기타 사항WebRTC 셋업과정에서 에러가 발생할 수 있는데, 디버깅하는 방법은 크게 두 가지가 있다. RTCPeerConnection의 이벤트 핸들러 사용 Chrome의 WebRTC Internal 사용 attribute EventHandler onnegotiationneeded; attribute EventHandler onicecandidate; attribute EventHandler onicecandidateerror; attribute EventHandler onsignalingstatechange; attribute EventHandler oniceconnectionstatechange; attribute EventHandler onicegatheringstatechange; attribute EventHandler onconnectionstatechange;RTCPeerConnction에서는 위와 같은 이벤트 핸들러들을 제공해주는데, 핸들러를 설치해서 상태 변화를 실시간으로 확인할 수 있다.Chrome Web InternalsWeb Internals 설명서이게 사실 핸들러 설치하는 것보다 직관적이면서 쉽긴하지만, application이 크롬을 사용하지 않는 경우는 사용할 수가 없고, 이벤트 핸들러의 결과랑 약간 다른 부분들이 있어서 문제가 생겼을 경우 둘 다 사용하는 것을 추천한다." }, { "title": "단단한 심층 강화학습 정리", "url": "/posts/%EB%8B%A8%EB%8B%A8%ED%95%9C-%EC%8B%AC%EC%B8%B5-%EA%B0%95%ED%99%94%ED%95%99%EC%8A%B5-%EC%A0%95%EB%A6%AC/", "categories": "AI, RL", "tags": "Book Review, Python, AI, RL", "date": "2024-07-17 03:00:00 +0000", "snippet": "단단한 심층 강화학습0. 소주제들1. MDP와 POMDP실제 세계에서 거의 대부분의 문제들은 POMDP이다.1. 강화학습 소개1.1 MDP로서의 강화학습 $s_t \\in S$: 상태의 집합 $a_t \\in A$: 행동의 집합 $P(s_{t+1}|s_t,a_t)$: 상태 전이 함수 ← Markov property $R(s_t, a_t, s_{t+...", "content": "단단한 심층 강화학습0. 소주제들1. MDP와 POMDP실제 세계에서 거의 대부분의 문제들은 POMDP이다.1. 강화학습 소개1.1 MDP로서의 강화학습 $s_t \\in S$: 상태의 집합 $a_t \\in A$: 행동의 집합 $P(s_{t+1}|s_t,a_t)$: 상태 전이 함수 ← Markov property $R(s_t, a_t, s_{t+1}) = r_t$: 보상 함수 경로: $\\tau = (s_0, a_0, r_0) , … \\ ,(s_T, a_T, r_T)$ 경로 보상 함수: $R(\\tau)=r_0 + \\gamma r_1 + \\cdot \\cdot \\cdot + \\gamma ^Tr_T = \\sum_{t=0}^{T}\\gamma ^t r_t$ 목적함수: \\(J(\\tau) = \\mathbb{E}_{\\tau \\sim \\pi}[R(\\tau)] = \\mathbb{E}_{\\tau }[\\sum_{t=0}^{T}\\gamma ^t r_t]\\)→ 목적함수를 최대화 == 최대 보상을 받는 경로를 구성하는 것1.2 심층 강화학습 알고리즘의 종류 정책 기반 $J(\\tau) = \\mathbb{E}_{\\tau \\sim \\pi}[R(\\tau)]$ 최대화하는 $\\pi$찾기 최적 정책 수렴이 보장 분산이 크고 표본 비효율적 ex: Reinforce 가치 기반\\[V^\\pi(s)=\\mathbb{E}_{s_0=s, \\tau \\sim \\pi}[\\sum_{t=0}^{T}\\gamma_t r_t]\\]\\[Q^\\pi(s,a)= \\mathbb{E}_{s_0=s, a_0=a, \\tau \\sim \\pi}[\\sum_{t=0}^{T}\\gamma_t r_t]\\] 표본 효율적 최적정책 수렴보장 X ex: Sarsa, Dqn 모델 기반 \\(P(s_{t+1}\\|s_t,a_t)\\) 가 주어지거나, 학습 ⇒ 최적 길찾기 문제 모델 학습 어려움 오차 비약적으로 증가 ex: mcts on-policy: 정책에 대해서 학습 → 훈련과정에서 $\\pi$로부터 생성된 데이터만을 이용 off-policy: 모든 데이터로 훈련 ⇒ data efficient1.3 강화학습과 지도학습의 차이 오라클의 부재: 정확한 목표값을 모름 피드백의 희소성: 대부분 상태의 보상이 0에 수렴함 에이전트와 환경이 상호작용하여 데이터 생성: 오차가 커짐2. Reinforce이름에서 알 수 있듯이 좋은 결과를 초래했던 행동을 강화(더 높은 확률로 선택되도록)하는 것이다.⇒ \\(J(\\pi_\\theta) = \\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)] = \\mathbb{E} _{\\tau \\sim \\pi_\\theta}[\\sum_{t=0}^{T}\\gamma ^t r_t]\\)를 최대화⇒ \\(\\theta \\leftarrow \\theta + \\alpha \\nabla_\\theta J(\\pi_\\theta)\\), \\(\\nabla_\\theta J(\\pi_\\theta) = \\mathbb{E}_{\\tau \\sim \\pi_\\theta}[\\sum_{t=0}^T R_t(\\tau)\\nabla_\\theta \\log\\pi_\\theta(a_t\\|s_t)]\\)2.1 정책 경사 계산\\(\\nabla_\\theta J(\\pi_\\theta) = \\nabla_\\theta\\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)] = \\mathbb{E}_{\\tau \\sim \\pi_\\theta}[\\sum_{t=0}^T R_t(\\tau)\\nabla_\\theta \\log\\pi_\\theta(a_t\\|s_t)]\\)를 유도해보자.보조정리 1.\\[\\nabla_\\theta\\mathbb{E}_{x \\sim p(x\\|\\theta)}[f(x)] = \\mathbb{E}_{x \\sim p(x\\|\\theta)}[f(x)\\nabla_\\theta\\log p(x\\|\\theta)]\\]보조정리 2.\\[\\log p(\\tau \\|\\theta) = \\sum_{t\\geq0}(\\log p(s_{t+1}\\|s_t,a_t) + \\log \\pi_\\theta(a_t\\|s_t))\\]보조정리 1에 의해, \\(\\nabla_\\theta\\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)] = \\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)\\nabla_\\theta\\log p(\\tau \\|\\theta)]\\)가 성립하고, 보조정리 2에 의해, \\(\\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)\\nabla_\\theta\\log p(\\tau \\|\\theta)] = \\mathbb{E}_{\\tau\\sim\\pi_\\theta}[\\sum_{t=0}^TR(\\tau)\\nabla_\\theta\\log\\pi_\\theta(a_t \\|s_t)]\\)가 성립한다. 한편, $a_t$를 선택하는 행위는 시간 $t$ 이후로만 영향을 끼치며, 몬테카를로 법칙에 따라 다음이 성립하게 된다.\\[\\nabla_\\theta J(\\pi_\\theta) = \\nabla_\\theta\\mathbb{E}_{\\tau \\sim \\pi_\\theta}[R(\\tau)] \\approx \\sum_{t=0}^T R_t(\\tau)\\nabla_\\theta \\log\\pi_\\theta(a_t|s_t)\\]2.2 알고리즘 구현 한 에피소드를 진행하고, 데이터를 모은다. $R_t(\\tau)$를 recursive하게 계산한다. 이를 활용하여 $\\nabla_\\theta J(\\pi_\\theta)$를 계산하고, 파라미터를 업데이트 한다.중요 포인트 $R_t(\\tau)$를 계산할 때, 종료시점 부터 역순으로 recursive하게 계산하면 $t$시간만에 계산이 가능하다. $R_t(\\tau)$에 특정 기준 값을 빼줌으로서 더 유용한 분포를 만들 수 있다. 보상값이 대부분 음인 경우 유용 3. SARSA3.1 Q함수와 V함수\\[V^\\pi(s)=\\mathbb{E}_{s_0=s, \\tau \\sim \\pi}[\\sum_{t=0}^{T}\\gamma_t r_t]\\]\\[Q^\\pi(s,a)= \\mathbb{E}_{s_0=s, a_0=a, \\tau \\sim \\pi}[\\sum_{t=0}^{T}\\gamma_t r_t]\\] Q함수는 에이전트에게 행동할 수 있는 직접적인 방법을 제공해 준다. Q함수를 통해 에이전트는 상태 s에 대해 최대의 Q값을 갖는 a를 바로 선택할 수 있다. 반면 V함수는, s에서 선택 가능한 모든 a를 통해 다음 상태 s’들의 V값을 계산해서 행동해야 한다. 그러나 이는 비용이 크고, 전이함수를 모르면 쉽지 않다. Q함수는 계산하기 더 복잡하고, 학습하기 위해 더 많은 데이터가 필요하다. 상태 s에서 나온 데이터는 상태 s의 V함수에 모두 활용될 수 있지만, Q함수에는 일치하는 행동에만 활용이 된다. 3.2 시간차 학습Reinforce에서 사용된 것과 같은 몬테카를로 알고리즘은, 한 에피소드가 끝날 때까지 기다린 후 학습할 수 있다는 단점이 있다.이를 해결하기 위해, SARSA에서는 TD학습을 활용한다. 벨만 방정식에 따라, Q함수를 recursive하게 정의할 수 있다.\\[Q^\\pi(s,a)=\\mathbb{E}_{s'\\sim p(s' \\|s,a), \\ \\ r\\sim R(s,a,s')}[r+\\gamma\\mathbb{E}_{a'\\sim \\pi(s')}[Q^\\pi(s',a')]]\\]이를 TD 학습을 적용하면, Q함수에 대한 추정값으로 바꿀 수 있다.$Q^\\pi(s,a)\\approx r+\\gamma Q^\\pi(s’,a’)=Q_{tar}^\\pi(s,a)$ 즉 현재 계산한 Q함수를 target Q함수에 가깝게 업데이트 하는 것이다. 지도학습과 유사하다.위 식의 의미는, 한 단계 미래의 상태를 봄을 통해, 미래에서 일어난 사건을 점진적으로 현재까지 반영하여 Q함수를 계산하게 된다는 것이다.이는 에이전트의 특적 목적은, 궤적이 진행됨에 따라 드러난다는 점에서 가치가 있다.한편, target Q함수에서 두 번의 기댓값을 생략했다. 바깥쪽 기댓값은 궤적을 충분히 많이 가짐으로서 해결할 수 있다.안쪽의 기댓값은 해결하는 방식에 따라 SARSA와 DQN으로 구분할 수 있다. SARSA: 실제로 다음 상태에서 취해진 행동으로 근사 DQN: 가장 큰 Q함수 값을 갖는 행동으로 근사또한 식의 파라미터 $\\gamma$에 대해 생각해볼 필요가 있다. $\\gamma$가 작으면, 에이전트는 근시안적이 되고 바로 일어날 보상에 대해서만 관심을 갖게 된다. 반면, $\\gamma$가 크면, 에이전트는 목표 상태에 도달하는 속도에 큰 관심을 갖지 않게 될 것이다. 또한, $\\gamma$이 작으면, Q함수의 학습속도는 빠르지만, 에이전트의 성능은 저하될 수 있다. 반대로 $\\gamma$가 크면, 학습속도는 느리지만, 학습결과는 더 우수해진다.3.3 탐험과 활용local minimum에 빠지지 않도록, 탐험과 활용의 비율을 적절히 조절해야한다. 왜냐하면, 탐욕만을 추구할 경우, Q함수의 편향은 실제 행동의 편향으로 이어질 것이기 때문이다.따라서, SARSA에서는 $\\epsilon$-greedy policy를 사용한다.3.4 알고리즘 구현 현재 상태 $s$, 현재 행동 $a$를 통해 그다음 상태 $s’$를 도출한다. $\\epsilon$-greedy policy를 활용하여 $a’$를 찾는다. target Q함수와 Q함수의 오차를 활용하여 파라미터를 업데이트 한다. $s \\leftarrow s’$, $a \\leftarrow a’$로 업데이트 하고, 이를 반복한다.중요 포인트 SARSA는 on-policy 알고리즘이므로 특정 정책에서 얻은 경험은 그 정책을 개선하는데만 사용될 수 있다. target Q값은 현재의 정책으로 인해 greedy하게 선택된 행동을 통해 계산하였기 때문이다. Reinforce와 달리 시간차 알고리즘을 통해 일정량의 데이터(배치)를 모은 후 train을 할 수 있다. → batch training(←→episodic training) 4. DQN4.1 DQN의 Q함수 학습$Q_{tar:SARSA}^\\pi(s,a) = r+\\gamma Q^\\pi(s’,a’)$$Q_{tar:DQN}^\\pi(s,a) = r+\\gamma \\max_{a’}Q^\\pi(s’,a’)$SARSA와 DQN의 타깃 Q함수는 위와 같은 차이가 있다. 다음 상태 s’에서 정책에 따라 실제 취해진 행동 a’에 대해 계산하지 않고, DQN은 선택가능한 모든 a’에 대한 Q함수중 가장 최대인 a’에 대해 계산한다.즉 DQN은 데이터가 샘플링된 정책과 상관없이, 특정 s’에 대해 같은 Q함수 값을 도출한다. 이를 통해 DQN은 경험과 정책의 상관성에서 벗어날 수 있다.또한 Q함수에 max를 취해준다는 것은, (s’,a’)에 대한 Q함수의 추정값이 정확하다는 가정 아래, Q함수를 최대화하는 행동을 선택하는 것이다. 이것이 에이전트가 할 수 있는 최선이다.4.2 DQN의 행동 선택DQN이 off-policy 알고리즘이지만, 여전히 경험을 수집하는 방식은 중요한 문제이다. 상태-행동 공간이 아주 클 경우, naive DQN은 모든 상태를 경험하기 힘들 것이다.이는 Q함수를 신경망으로 근사함으로서 어느 정도는 해결 될 수 있지만, 불연속적인 보상에 대해서는 예측이 어려움 등 여전히 한계가 존재한다.따라서, DQN에서도 SARSA처럼 $\\epsilon$-greedy policy를 사용하거나, 볼츠만 정책을 활용함을 통해 문제를 해결할 수 있다.볼츠만 정책볼츠만 정책은 행동의 상대적인 Q가치를 이용하여 행동을 확률적으로 선택한다.\\[p_{softmax}(a \\|s)=\\frac{e^{Q^\\pi(s,a)}}{\\sum_{a'}e^{Q^\\pi(s,a')}}\\]\\[p_{boltzman}(a \\|s)=\\frac{e^{Q^\\pi(s,a)/\\tau}}{\\sum_{a'}e^{Q^\\pi(s,a')/\\tau}}\\]$\\tau$를 크게 하면, 분포는 더 균일해지고, $\\tau$를 작게하면 분포는 더 집중된 분포를 가진다.$\\epsilon$-greedy policy에 비교했을 때의 장점은, 환경을 덜 무작이로 탐험한다는 것이다. $\\epsilon$의 확률로 무작위로 선택하는 것이 아닌, Q가치에 비례하여 무작위로 행동을 선택한다.따라서 볼츠만 정책은 $\\epsilon$-greedy policy보다 Q가치 추정값과 행동 확률 사이의 관계를 더 부드럽게 만든다.다만 Q가치 추정값이 최적 Q가치와 오차가 큰 경우, $\\epsilon$-greedy policy가 더 유리하다. 이를 해결하기 위해 훈련 초기에 $\\tau$를 키울 수 있다.4.3 경험 재현On-policy 알고리즘은 업데이트를 위해 오직 현재 정책에 따라 수집된 데이터만을 이용할 수 있다. 따라서 타깃 Q함수와 기존 Q함수의 차이가 큰 경우와 같이 한 경험으로 여러번의 파라미터 업데이트가 필요한 문제를 해결하지 못한다. 수집된 데이터들은 한 정책으로부터 나온 것이므로 서로 밀접하게 연관되어있다. 이로 인해 파라미터 업데이트의 분산이 커질 수 있다.반면 Off-policy 알고리즘은 한번 사용된 경험을 폐기할 필요가 없다. ⇒ experience replay(경험 재현) 경험들의 연관성이 낮아진다.4.4 알고리즘 구현 에피소드를 최소량의 경험 데이터가 모일때까지 진행한다. 이후 주기적으로, 경험 데이터를 통해 파라미터를 업데이트 한다.중요 포인트 expierence replay를 통해 batch방식으로 파라미터를 업데이트할 수 있다.5. 향상된 DQN5.1 목표 네트워크DQN은 TD학습을 이용한다. 즉, 현재 Q함수를 타깃 Q함수의 방향으로 파라미터를 업데이트 한다.여기서 중요한 점은, 두 Q함수를 근사하는데 활용된 파라미터가 동일하다는 점이다.이로 인해 발생하는 문제점은, 업데이트의 목표도 계속 함께 움직인다는 것이다.이를 해결하기 위해, 타깃 Q함수를 위한 별도의 네트워크를 구성하고, 이 목표 네트워크를 주기적으로 메인 네트워크로 업데이트 한다.이를 통해 일반적인 지도 회귀 문제로 전환할 수 있다.이를 치환 업데이트 라고 부르며, 이와 다르게 폴리악(polyak) 업데이트를 시행할 수도 있다.목표 네트워크의 추가로 인해 훈련속도가 저하될 수 있다는 단점이 있다. 이는 업데이트 주기를 조절함을 통해 해결할 수 있다.5.2 이중 DQNDQN은 타깃 함수를 추정할 때, 추정값의 최댓값을 활용한다. 그러나, 타깃함수에 오차가 조금이라도 있다면, 최댓값이 양의 방향으로 편향되어 과대 추정이 일어나게 된다.$Q_{tar:DQN}^\\pi(s,a) = r+\\gamma \\max_{a’}Q^\\pi(s’,a’)$에서 max를 취함으로서 발생하는 문제이다.이것은 최대 기댓값 과대 추정이라는 문제인데, $s’$에서 취할 수 있는 $a’$가 많을 수록, 더욱 크게 편향된다.한편, DQN은 자주 경험한 쌍에 대해 더 자주 과대 추정을 하게 되고, 에이전트가 균일하게 탐험하지 못했을 경우, 이는 악순환을 만든다.아래 코드와 그래프로 최대 기댓값 추정 문제를 시뮬레이션 해볼 수 있다. 비록 정확한 기댓값을 계산하지는 않았지만(아래에서는 mean으로 계산), 결과와 의미 자체는 동일하다.import numpy as npimport matplotlib.pyplot as pltdef maxexpred(n_act): s = [] for i in range(10000): s.append(max(np.random.normal(0, 1, n_act))) return np.mean(s)x = range(1, 30)y = [maxexpred(i) for i in x]plt.plot(x, y)plt.savefig('img.png')아무튼 이러한 문제점을 해결하는 방법은, 다음과 같이 네트워크를 하나 추가하는 것이다.$Q_{tar:DoubleDQN}^\\pi(s,a) = r + \\gamma Q^{\\pi_\\varphi}(s’,\\max_{a’}Q^{\\pi_\\theta}(s’,a’))$그리고 이를 구현할 시에는, 위에서 살펴본 목표 네트워크로 두 가지 역할을 모두 수행하면 된다.5.3 우선순위가 있는 경험 재현(PER)직관적으로, 새로운 작업을 할 때, 어떤 경험이 다른 것보다 더 많은 것을 알려주는 상황을 생각해볼 수 있다.DQN에서는 TD오차가 큰 경우가 해당될 것이다. 이러한 관점에서, 경험을 기억에서 무작위로 추출하기 보다는, 경험에 우선순위를 부여해서 추출하자는 개념이다.\\(P(i) = \\frac{(\\|w_i \\| +\\epsilon)^\\eta}{\\sum_j(\\| w_j \\| +\\epsilon)^\\eta}\\), $w_i$는 i번째 경험에 대한 TD오차, $\\eta$가 클 수록 우선순위를 강하게 부여한편, 이와 같은 방식으로 경험의 분포에 대한 기댓값이 바뀌게 되고, 편차가 생기게 된다. 이를 해결하기 위해 TD오차에 가중치를 곱함으로써 보정할 수 있다.이 방법을 importance sampling이라고 한다.[강화학습] Importance sampling이란?5.4 알고리즘 구현중요 포인트 네트워크를 하나 추가함을 통해, target network와 double DQN을 동시에 구현할 수 있다. PER을 구현할 때, 파라미터를 업데이트 할 때마다 경험들에 대한 TD오차를 다시 계산해야 한다. Sum Tree를 사용하면, PER을 효율적으로 구현할 수 있다.6. A2C학습된 강화 신호가 환경에서 얻는 보상보다 정책에 대해 더 많은 것을 알려줄 수 있다.6.1 행동자행동자는 정책 경사를 이용하여 정책 $\\pi_\\theta$를 학습한다. A2C: \\(\\nabla _\\theta J(\\pi_\\theta) = \\mathbb{E}_t[A_t^\\pi\\nabla_\\theta \\log\\pi_\\theta(a_t \\|s_t)]\\) Reinforce: \\(\\nabla _\\theta J(\\pi_\\theta) = \\mathbb{E}_t[R_t(\\tau)\\nabla_\\theta \\log\\pi_\\theta(a_t \\|s_t)]\\)6.2 비평자비평자는 (s,a)쌍을 평가하는 방법을 학습하고, 그 결과를 이용하여 $A^\\pi$를 생성한다.어드밴티지 함수어드밴티지 함수: $A^\\pi(s_t,a_t)=Q^\\pi(s_t,a_t)-V^\\pi(s_t)$ 강화 신호의 품질이 우수하다. 상태 s에서 모든 행동을 고려하여 특정 행동 a를 평가하며 행동 a의 상대적 우수성을 강화 신호로 만든다. 강화 신호가 상대적이지 않다면, $Q^\\pi(s_t,a_t) &gt;0$ 이고 $A^\\pi(s_t,a_t)&lt;0$인 경우 문제가 생기게 된다. 행동의 장기적 효과를 포착한다. 어드밴티지는 정책이 현재 특별히 좋지 않은 상태에 있다고 해서 행동을 억제 하지 않는다. 반대로, 좋은 상태에 있는 정책에 대해 행동에 가점을 주지 않는다. 이를 통해 행동이 미래의 가치를 어떻게 변화시킬지만을 고려하여 행동을 평가하게 된다. 어드밴티지를 추정하는 방법은 크게 두 가지가 있다.두 방법 모두 V함수를 먼저 학습하고, V를 통해 Q를 계산한다.이유는, Q함수가 V함수에 비해 더 복잡하고 더 많은 표본을 필요로 하며, Q로부터 V를 추정하는 것이 더 많은 계산을 필요로 하기 때문이다.1. n단계 이득(n-step forward return)n단계 이득에서 학습된 V로 Q를 추정하는 방법은 아래와 같다.\\[Q^\\pi(s_t,a_t)=\\mathbb{E}_{\\tau\\sim\\pi}[r_t+\\gamma r_{t+1} + \\cdot\\cdot\\cdot+\\gamma^nr_{t+n}]+\\gamma^{n+1}V^\\pi(s_{t+n+1})\\]\\[\\approx r_t +\\gamma r_{t+1} + \\cdot\\cdot\\cdot+\\gamma^n r_{t+n} + \\gamma^{n+1}\\hat{V}^\\pi(s_{t+n+1})\\]등호는 보상의 합의 기댓값과 완벽한 V함수를 알고 있을 때 성립한다.이를 계산 가능하도록, 기댓값 대신, 보상의 궤적을 사용하고, 비평자가 학습한 V함수를 사용한다.n을 키우면 편향은 줄어들지만 분산은 커지고, n을 줄이면 분산은 줄어들지만 편향은 커진다.$A^\\pi_{NSTEP}(s_t,a_t)=Q^\\pi(s_t,a_t)-V^\\pi(s_t)$\\[\\approx r_t +\\gamma r_{t+1} + \\cdot\\cdot\\cdot+\\gamma^n r_{t+n} + \\gamma^{n+1}\\hat{V}^\\pi(s_{t+n+1}) - \\hat{V}^\\pi(s_t)\\]2. 일반화된 어드밴티지 추정(GAE)이 방법은 하나의 n값을 선택하는 문제를 해결하기 위해, 여러개의 n값을 이용한다.이를 위해, n단계 어드밴티지 추정기를 다음과 같이 정의한다.$A_t^\\pi(n) = r_t + \\gamma r_{t+1} + \\cdot\\cdot\\cdot + \\gamma^nV^\\pi(s_{t+n})-V^\\pi(s_t)$그리고 GAE는 다음과 같이 어드밴티지 추정기의 지수가중평균으로 계산된다.$A_{GAE}^\\pi(s_t,a_t)=(1-\\lambda)(A_t^\\pi(1) + \\lambda A_t^\\pi(2) + \\cdot\\cdot\\cdot)$$\\delta_t = r_t+\\gamma V^\\pi(s_{t+1})-V^\\pi(s_t)$를 활용하면, 아래와 같은 공식으로 정리할 수 있다.\\[\\begin{align} &amp; A^{\\pi}_t(1) = \\delta_t &amp; &amp;= r_t + \\gamma V(s_{t+1}) - V(s_t) \\\\&amp; A^{\\pi}_t(2) = \\delta_t + \\gamma \\delta_{t+1} &amp; &amp;= r_t + \\gamma r_{t+1} + \\gamma^2 V(s_{t+2}) - V(s_t) \\\\&amp; A^{\\pi}_t(3) = \\delta_t + \\gamma \\delta_{t+1} + \\gamma ^2 \\delta_{t+2} &amp; &amp;= r_t + \\gamma r_{t+1} + \\gamma^2 r_{t+2} + \\gamma^3 V(s_{t+3}) - V(s_t)\\end{align}\\]\\[\\begin{align}A_{GAE}^{\\pi}(s_t,a_t) &amp;= (1-\\lambda)\\Big(A_{t}^{\\pi}(1) + \\lambda A_{t}^{\\pi}(2) + \\lambda^2 A_{t}^{\\pi}(3) + \\cdots \\Big) \\\\&amp;= (1-\\lambda)\\Big(\\delta_t + \\lambda(\\delta_t + \\gamma \\delta_{t+1}) + \\lambda^2(\\delta_t + \\gamma \\delta_{t+1} + \\gamma^2 \\delta_{t+2})+ \\cdots \\Big) \\\\&amp;= (1-\\lambda)\\Big( \\delta_t(1+\\lambda+\\lambda^2+\\cdots) + \\gamma\\delta_{t+1}(\\lambda+\\lambda^2+\\cdots) + \\cdots \\Big) \\\\&amp;= (1-\\lambda)\\left(\\delta_t \\frac{1}{1-\\lambda} + \\gamma \\delta_{t+1}\\frac{\\lambda}{1-\\lambda} + \\cdots\\right) \\\\&amp;= \\sum_{l=0}^\\infty (\\gamma \\lambda)^l \\delta_{t+l}\\end{align}\\]3. 어드밴티지 함수에 대한 학습n단계 이득과 일반화된 어드밴티지 추정 모두, V함수에 대한 학습을 필요로 한다. 이는 DQN에서 했던것 과 같이 TD학습을 통해 타깃 함수와의 오차를 이용해 학습된다.그리고 계산을 간단히 하기 위해, 각 알고리즘에서 어드밴티지 함수를 구성하는 방식을 활용해서 타깃함수를 만든다.n-step: $V_{tar}^\\pi(s_t)=r_t+\\gamma r_{t+1} + \\cdot\\cdot\\cdot + \\gamma^n r_{t+n} + \\gamma r^{r+1}\\hat{V}^\\pi(s_{t+n+1})$GAE: $V_{tar}^\\pi(s_t)=A^\\pi_{GAE}(s_t,a_t)+\\hat{V}^\\pi(s_t)$6.3 알고리즘 구현 한 에피소드를 진행하고, 데이터를 모은다. 비평자 네트워크를 통해, V함수의 예측값을 계산한다. V함수의 예측값을 활용하여 어드밴티지 함수를 계산한다. 어드밴티지 함수를 활용하여 타깃함수를 만든다. 행동자 네트워크를 활용하여 엔트로피를 계산한다. 비평자 네트워크의 손실값을 계산한다. 행동자 네트워크의 손실값을 계산한다. 파라미터를 업데이트한다.중요 포인트 n-step이냐 GAE냐에 따라서 타깃함수를 만드는 법이 달라진다. 엔트로피값을 행동자 네트워크의 손실값에 빼줌을 통해 정책의 분포의 균일함을 유지할 수 있다. 비평자와 행동자 네트워크를 한개의 네트워크로 구성할 수 있다. 스칼라 가중치를 이용해 균형을 맞출 필요가 있다.7. PPO7.1 성능 붕괴성능 붕괴 문제란 정책 경사 알고리즘(Policy Gradient)에서 발생하는 문제이다. 파라미터 업데이트를 위한 이상적인 학습률을 결정하기 어렵기 때문에 발생한다.적절하지 않은 학습률 $\\alpha$는 local maxima에 빠트리거나, 좋은 정책을 건너뛰게 만들어 성능 붕괴를 일으킨다.학습률을 결정하기 어려운 결정적인 원인은, 정책공간과 파라미터 공간이 정확하게 대응되지 않는다는 데 있다.즉, \\(d_\\theta(\\theta_1,\\theta_2)=d_\\theta(\\theta_2,\\theta_3)\\nLeftrightarrow d_\\pi(\\pi_{\\theta_1},\\pi_{\\theta_2})=d_\\pi(\\pi_{\\theta_2},\\pi_{\\theta_3})\\)라는 것이다.이를 해결하기 위해, 파라미터로 업데이트로 새로 만든 정책의 상대적인 성능을 측정하는 방법이 필요하다.7.2 TRPO상대적 성능 식별자는 두 정책의 목적 함수 사이의 차이로 정의할 수 있다. 그리고 아래 식을 통해 계산 가능하다.\\[J(\\pi')-J(\\pi)=\\mathbb{E}_{\\tau \\sim \\pi'}[\\sum_{t=0}^T\\gamma^tA^\\pi(s_t,a_t)]\\]증명은 아래와 같다.\\[\\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t=0}^T\\gamma^tA^\\pi(s_t,a_t)] = \\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t\\ge0}\\gamma^t(\\mathbb{E}_{s_{t+1},r_t\\sim p(s_{t+1},r_t|s_t,a_t)}[r_t+\\gamma V^\\pi(s_{t+1})] - V^\\pi(s_t))]\\]어드밴티지 함수를 전개한다.\\[=\\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t\\ge0}\\gamma^t(r_t+\\gamma V^\\pi(s_{t+1})-V^\\pi(s_t))] = \\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t\\ge0}\\gamma^tr_t] +\\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t\\ge0}\\gamma^{t+1} V^\\pi(s_{t+1})-\\sum_{t\\ge0}\\gamma^t V^\\pi(s_t))]\\]내부의 기댓값이 사라지는 이유는, 바깥쪽의 기댓값은 전이함수로부터 나온 상태와 보상의 기댓값을 포함하기 때문이다. 또한 기댓값의 선형성을 활용하였다.\\[=J(\\pi')+\\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t\\ge1}\\gamma^{t} V^\\pi(s_{t})-\\sum_{t\\ge0}\\gamma^t V^\\pi(s_t))]=J(\\pi')-\\mathbb{E}_{\\tau\\sim\\pi'}[V^\\pi(s_0)]\\]식을 단순히 변형하였다.\\[=J(\\pi')-\\mathbb{E}_{\\tau\\sim\\pi'}[J(\\pi)]=J(\\pi')-J(\\pi)\\]증명 끝.한편, \\(J(\\pi')-J(\\pi)=\\mathbb{E}_{\\tau \\sim \\pi'}[\\sum_{t=0}^T\\gamma^tA^\\pi(s_t,a_t)]\\) 이 식에는 문제점이 있다.업데이트 이전에 새로운 정책으로 부터 추출된 궤적으로부터 기댓값을 계산해야한다는 것이다. 하지만 새로운 정책은 업데이트 이전에 얻을 수 없다.이를 해결하기 위해, 중요도 표본추출(importance sampling)을 통해 식을 변형한다.\\[J(\\pi')-J(\\pi)=\\mathbb{E}_{\\tau\\sim\\pi'}[\\sum_{t=0}^T\\gamma^tA^\\pi(s_t,a_t)]\\approx\\mathbb{E}_{\\tau\\sim\\pi}[\\sum_{t\\ge0}A^\\pi(s_t,a_t)\\frac{\\pi'(a_t \\|s_t)}{\\pi(a_t \\|s_t)}]=J_\\pi^{CPI}(\\pi')\\]그리고 이를 대리목적(surrogate objective)라고 부른다. 이 새로운 목적함수를 이용한 최적화가 여전히 정책 경사상승을 수행하는지 확인할 필요가 있을 것이다.\\[\\nabla_\\theta J_{\\theta_{old}}^{CPI}(\\theta)|_{\\theta_{old}}=\\nabla_\\theta\\mathbb{E}_{\\tau\\sim\\pi_{\\theta_{old}}}[\\sum_{t\\ge0}A^{\\pi_{\\theta_{old}}}](s_t,a_t)\\frac{\\pi_\\theta(a_t|s_t)}{\\pi_{\\theta_{old}}(a_t,s_t)}]|_{\\theta_{old}}\\]\\[=\\mathbb{E}_{\\tau\\sim\\pi_{\\theta_{old}}}[\\sum_{t\\ge0}A^{\\pi_{\\theta_{old}}}(s_t,a_t)\\frac{\\nabla_\\theta\\pi_\\theta(a_t|s_t)|_{\\theta_{old}}}{\\pi_\\theta(a_t,s_t)|_{\\theta_{old}}}]=\\mathbb{E}_{\\tau\\sim\\pi_{\\theta_{old}}}[\\sum_{t\\ge0}A^{\\pi_{\\theta_{old}}}](s_t,a_t)\\nabla_\\theta\\log\\pi_\\theta(a_t,s_t)|_{\\theta_{old}}]\\]로그 미분법을 활용한다.\\[=\\nabla_\\theta J(\\pi_\\theta)|_{\\theta_{old}}\\Rrightarrow \\nabla_\\theta J_{\\theta_{old}}^{CPI}(\\theta)|_{\\theta_{old}}=\\nabla_\\theta J(\\pi_\\theta)|_{\\theta_{old}}\\]이를 통해 대리목적을 최적화하는 것이 곧 정책 향상을 최대화하는 것이라는 것을 알게 되었다. 또한, $J_\\pi^{CPI}(\\pi’)$가 $J(\\pi’)-J(\\pi)$에 대한 선형근사라는 것도 알 수 있다.따라서, $J_\\pi^{CPI}(\\pi’)$를 활용하기 위해선, $J(\\pi’)-J(\\pi)\\ge0$이 보장되어야 한다. 이는 KL Divergence를 통해 보장할 수 있다.\\[|(J(\\pi')-J(\\pi))-J_\\pi^{CPI}(\\pi')| \\le C\\sqrt{\\mathbb{E}_t[KL(\\pi'(a_t|s_t)||\\pi(a_t|s_t)]}\\]이 식은 새로운목적함수 $J(\\pi’)$와 추정값 $J(\\pi) + J_\\pi^{CPI}(\\pi’)$의 차이에 대한 절댓값 오차를 표현하다. 그리고 이는 KL Divergence를 통해 제한된다.이것을 활용하면, 원하는 결과를 유도할 수 있다.\\[J(\\pi')-J(\\pi) \\ge J_\\pi^{CPI}(\\pi')-C\\sqrt{\\mathbb{E}_t[KL(\\pi'(a_t|s_t)||\\pi(a_t|s_t)]}\\]즉 정책 변화가 의미 있으려면 정책 향상의 추정값이 KL Divergence보다 커야한다. 그렇지 않은 경우 업데이트를 수행하지 않으면 단조 향상이 보장된다.최종적으로, 최적화 문제는 다음으로 전환된다.\\[argmax_{\\pi'}(J_\\pi^{CPI}(\\pi')-C\\sqrt{\\mathbb{E}_t[KL(\\pi'(a_t|s_t)||\\pi(a_t|s_t)]})\\]구현 가능성을 위해, 식을 아래와 같이 바꿀 수도 있다.\\[max_\\theta\\mathbb{E}_t[\\frac{\\pi_\\theta(a_t|s_t)}{\\pi_{\\theta_{old}}(a_t,s_t)}A_t^{\\pi_{\\theta_{old}}}] \\ \\ \\ st.\\ \\mathbb{E}_t[KL(\\pi'(a_t|s_t)||\\pi(a_t|s_t)] \\le \\delta\\]여기서 $\\delta$를 신뢰 영역(trust region)이라고 부르고, 이는 튜닝이 필요한 하이퍼파라미터이다.7.3 PPOTRPO의 문제점은 계산량이 많고, $\\delta$를 선택해야한다는 것이다. PPO는 두 가지 방식으로 이를 해결한다.우선, \\(r_t(\\theta)=\\frac{\\pi_\\theta(a_t \\|s_t)}{\\pi_{\\theta_{old}}(a_t,s_t)}\\)를 활용하여, 대리목적을 간단히 표현한다. \\(J^{CPI}(\\theta)=\\mathbb{E}_t[r_t(\\theta)A_t]\\)1. 적응 KL 페널티\\[J^{KLPEN}(\\theta)=max_\\theta\\mathbb{E}_t[r_t(\\theta)A_t - \\beta KL(\\pi_\\theta(a_t \\|s_t)\\|\\|\\pi_{\\theta_{old}}(a_t \\|s_t)\\]이 식은 KL 페널티 대리목적(KL-penalized surrogate objective)이라고 부른다. 이는 PPO에서 $\\delta$로 제한조건을 둔 것과 같은 기능을 한다.$\\beta$가 커지면 두 정책 사이의 거리 유지가 강조되고, 작아지면 허용 오차가 높아진다.한편, 이 식에서도 여전히 적절한 $\\beta$를 찾는 문제가 발생한다. PPO에서는 $\\beta$가 시간에 따라 다르게 적응하는 것을 제안한다.즉 $\\delta$가 기준보다 작으면 $\\beta$를 낮추고, $\\delta$가 기준보다 크면 $\\beta$를 키운다. 하지만 여전히 기준 $\\delta$값 선택 문제를 해결하지 못한다….2. 대리목적 클리핑$J^{CLIP}(\\theta)=\\mathbb{E}_t[min(r_t(\\theta)A_t, \\ clip(r_t(\\theta), 1-\\epsilon,1+\\epsilon)A_t)]$이를 클리핑이 적용된 대리목적(clipped surrogate objective)라고 부른다.클리핑을 적용함을 통해, $r_t(\\theta)$를 $[1-\\epsilon, 1+\\epsilon]$의 범위 밖으로 벗어나게 만들 정도로 정책을 변화시킬 이유가 없다.7.4 알고리즘 구현" }, { "title": "js 공부 정리", "url": "/posts/js-%EA%B3%B5%EB%B6%80-%EC%A0%95%EB%A6%AC/", "categories": "Code, Web, Frontend", "tags": "js, frontend", "date": "2024-07-16 03:00:00 +0000", "snippet": "Javascript 공부1. 기본 문법 Hello world! &lt;script&gt; alert('Hello world'); &lt;/script&gt; &lt;script src=\"/path/to/script.js\"&gt;&lt;/script&gt; 주석 //주석1 /* 주석2 */ 엄격모드 ...", "content": "Javascript 공부1. 기본 문법 Hello world! &lt;script&gt; alert('Hello world'); &lt;/script&gt; &lt;script src=\"/path/to/script.js\"&gt;&lt;/script&gt; 주석 //주석1 /* 주석2 */ 엄격모드 \"use strict\"; //모던한 방식(ES5)로 코드 실행 기본 상호작용 alert alert(\"hello\"); prompt result = prompt(\"type something\", \"default\"); 입력을 취소한 경우, null이 반환됨. confirm let result = confirm(\"true or false\"); alert(result); 2. 변수와 변수의 활용 변수와 상수 변수 let message = 'Hello' let a; a = 'a'; let과 var는 거의 동일한 키워드이다. 변수를 두 번 이상 선언하면 에러가 발생한다. use strict가 없으면 let 없이도 선언이 가능하나, 추천하지 않는다. 상수 const message = \"hello\"; 자료형 number type 정수, 부동소수점, Infinity, -Infinity, NaN 0으로 나눌 경우, zero division error가 아닌 Infinity를 출력한다. NaN은 계산 중 에러가 발생했다는 것을 의미함. bigint 2^53^-1 이상 -(2^53^-1) 이하인 숫자를 사용할때. const bigInt = 1234567890123456789012345678901234567890n; string 큰 따옴표나 작은 따옴표는 차이를 두지 않음. 역 따옴표는 파이썬의 fstring 처럼 활용할 수 있다. let name = \"John\"; alert(`Hello, ${name}!`); // Hello, John! boolean true, false null 값을 의도적으로 할당하지 않음 undefined 값을 할당하지 않은 상태 let age = 100; age = undefined; alert(age); // \"undefined\" typeof x 또는 typeof(x)로 변수의 자료형을 확인할 수 있다. 형변환 문자형으로 변환 변수가 출력될 때, 또는 String()함수가 사용되었을때 일어난다. 숫자형으로 변환 변수가 수식 속에서 활용되었을 때, 또는 Number()함수가 사용되었을 때 일어난다. 숫자 이외의 글자가 들어있는 문자열의 경우, NaN이 반환된다. 불린형으로 변환 논리연상이 수행될 때, 도는 Boolean()함수가 사용될 때 일어난다. 0, 빈 문자열, null, undefined, NaN과 같은 비어있는 값들이 false가 된다. 연산자 +이항 연산자의 경우 피연사중 하나가 문자열이면, 다른 하나도 문자열로 변환됨. +단항연산자의 경우, 피연산자를 숫자형으로 변환하는 역활을 함. =연산자는 값을 대입하는 것 뿐만 아니라 반환하는 역활도 함. let a, b, c; a = b = c = 2 + 2; ,연산자는 여러 표현식을 한 줄에 평가할 수 있도록 함. 마지막 부분만 반환이 된다. let a = (1 + 2, 3 + 4); alert( a ); // 7 (3 + 4의 결과) ==(equality operator)와 ===(strict equality operator)의 차이를 알아야 한다. ===는 비교 시 형변환을 하지 않는다. ===를 제외한 다른 비교 연산자들은 형변환을 기본적으로 수행한다. 다만 ==의 경우 null 또는 undefined가 오면, 형변환을 수행하지 않는다. 그 외의 경우 null은 0, undefined는 NaN으로 변환된다. 한편, null==undefined는 true이다… ㅋㅋ 3. 기본 코드 구조 if, else문 if (year == 2015){ alert(\"true\"); } else if (year &gt; 2015){ alert(\"too big\"); }else { alert(\"too small\"); } ? 조건부 연산자 let result = condition ? val1 : val2; || 연산자 피연산자가 불린형이 아닌 경우, 첫번째 true값, 모두 false인 경우 마지막 값을 반환한다. &amp;&amp; 연산자 피연산자가 불린형이 아닌 경우, 첫번째 false값, 모두 true인 경우 마지막 값을 반환한다. ?? 연산자 ||와 비슷하지만, true가 아닌 null 또는 undefined 여부를 확인함. let height = 0; height = height || 100; //height는 100 height = height ?? 100; //height는 0 while, for문 while (condition){ //code } do { //code } while (codition); for (let i=0; i&lt;3; i++){ //code } //for문 변수 선언, 조건, 스텝을 생략할 수 있다. continue와 break가 존재한다. 레이블을 사용하여 특정 부분으로 continue, break할 수 있다. labelName: for (...) { ... } switch문 switch(x){ case 1: //code case 2: case 3: //code default: //code } switch문의 조건은 값 뿐만아니라 자료형까지의 일치를 요구한다. 4. 함수 함수의 선언 function showMessage(message, option=\"default\") { alert(message); return true; } 매개변수에 값이 할당되지 않은 경우, 매개변수는 undefined값을 갖고, return 값이 없을 경우 함수는 undefined를 반환한다. 함수 표현식 let sayHi = function(){ alert(\"Hello\"); }; let func = sayHi; func(); 함수를 이러한 변수의 개념으로 바라봄으로써, 함수를 콜백함수로서 활용할 수도 있고, 익명함수를 만들 수도 있다. 함수 선언문과 함수 표현식의 차이점은, 함수 선언문은 해당 구역에 대해 전역적이다.(순서 상관 x) 함수 표현식은 함수 변수의 선언 위치에 따라, 전역적으로 활용할 수 있다. 화살표 함수 let sum = (a, b) =&gt; a + b; /* 위 화살표 함수는 아래 함수의 축약 버전입니다. let sum = function(a, b) { return a + b; }; */ 매개변수가 하나면 괄호를 생략하고, 매개변수가 없으면, 괄호만 사용하면 된다. let age = prompt(\"나이를 알려주세요.\", 18); let welcome = (age &lt; 18) ? () =&gt; alert('안녕') : () =&gt; alert(\"안녕하세요!\"); welcome(); 5. 자료구조와 자료형 숫자형 num.toString(base) base진법으로 숫자를 변환한다. Math.floor(num) / Math.ceil(num) / Math.round(num) / Math.trunc(num) 바닥함수, 천장함수, 반올림, 소수부 삭제 isNaN(num) / isFinite(num) parseInt(str) / parseFloat(str) 가능한 부분까지 정수와 실수를 반환함 Math.random() Math.max(nums) / Math.min(nums) 문자열 str.length str.[pos] / str.charAt(pos) 없을 경우 undefined, ‘‘를 반환 str.toUpperCase() str.indexOf(str [, pos]) / str.lastindexOf() 없을 경우 -1 반환 str.includes(str) / str.startsWith(str) / str.endsWith(str) str.slice(start [, end]) end는 포함하지 않음 음수를 통해 뒤를 기준으로 인덱싱 할 수 있음 -str.substring(start [ ,end]) slice와의 차이는 slice는 start가 end보다 크면 ‘‘를 반환하며, 음수 값을 활용할 수 있다는 점이다. -str.substr(start [,length]) 배열 let arr = new Array(); let arr = []; let arr = [\"a\", \"b\"]; 배열 요소의 자료형에는 제약이 없다. push(), pop()을 통해 queue를 구현할 수 있다. 배열을 순회할 때에는 for..of와 for..in을 사용할 수 있다. for (let fruit of fruits) { alert( fruit ); } for (let key in arr) { alert( arr[key] ); // 사과, 오렌지, 배 } 둘의 차이는 for .. in은 리스트 뿐만 아니라 객체의 프로퍼티에 대해서도 사용가능하다는 점이다. 그만큼 느리다. ```js let matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9] ]; alert( matrix[1][1] ); ``` 배열과 메서드 arr.splice(index [, deleteCount, elem1, …,elemN]) 배열의 요소를 index부터 deleteCount 개만큼 삭제하고 반환한다. deleteCount를 0으로 하면, 삭제하지 않고, elm들을 삽입하는 함수로 활용할 수 있다. arr.slice([start], [end]) 새로운 배열을 반환 arr.concat(arg, arg2….) arg가 배열인 경우, 평탄화하여 결합한다. arr.forEach [\"Bilbo\", \"Gandalf\", \"Nazgul\"].forEach((item, index, array) =&gt; { alert(`${item} is at index ${index} in ${array}`); }); arr.indexOf(item, from) / arr.lastIndexOf(from) / arr.includes(item, from) arr.find(fn) / arr.findIndex(fn) let arr = [1, 2, 3, 4, 5]; let elm = arr.find(item =&gt; item==2); alert(elem); findIndex는 요소가 아닌 요소의 위치를 반환(없으면 -1)한다. arr.filter(fn) let arr = [1, 2, 3, 4, 5]; let new_arr = arr.filter(item =&gt; item % 2 == 0); alert(new_arr); arr.filter(fn) let result = arr.map(function(item, index, array) { // 요소 대신 새로운 값을 반환합니다. }); arr.map(fn) arr.sort(fn) 기본적으로, fn을 명시하지 않는 경우 sort는 배열의 원소를 문자열로 변환하여 비교한다는 점을 주의해야한다. functon fn(a, b) { if (a &gt; b) return 1; if (a == b) return 0; if (a &lt; b) return -1; } arr.reverse() arr.split(str) str을 기준으로 문자열을 쪼개어 배열로 만든다. str을 ‘‘로 정의하면, 글자단위로 문자열을 쪼갤 수 있다. arr.join(str) arr.reduce(fn) / arr.reduceRight(fn) let value = arr.reduce(function(accumulator, item, index, array) { // ... }, [initial]); let arr = [1, 2, 3, 4, 5]; let result = arr.reduce((sum, current) =&gt; sum + current, 0); alert(result); // 15 Array.isArray(arr) " }, { "title": "html 공부 정리", "url": "/posts/html-%EA%B3%B5%EB%B6%80-%EC%A0%95%EB%A6%AC/", "categories": "Code, Web, Frontend", "tags": "html, frontend", "date": "2024-07-16 03:00:00 +0000", "snippet": "html 공부1. Basic Structure&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;title&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;heading&lt;/h1&gt; &lt;p&gt;paragraph...", "content": "html 공부1. Basic Structure&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;title&lt;/title&gt; &lt;/head&gt;&lt;body&gt; &lt;h1&gt;heading&lt;/h1&gt; &lt;p&gt;paragraph&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;2. Major Elements heading: &lt;h1&gt; ~ &lt;h2&gt; paragraph: &lt;p&gt; or &lt;pre&gt; link: &lt;a href=”link”&gt; br: &lt;br&gt; hr: &lt;hr&gt; formatting elements: &lt;b&gt;, &lt;strong&gt; … form3. Attributes lang: helps search engine &lt;- html’s attribute title: add tooltip to elements style: set styles of element id class4. HeadingsHeadings help search engines index file structure.-&gt; needs careful usage5. ParagraphsWith Html, you cannot change the display by adding extra spaces or extra lines. Browsers automatically removes extra spaces. Line break is decided by browsers size.Solution for this is using &lt;br&gt; or &lt;hr&gt; or &lt;pre&gt; tag.6. Html Styles&lt;tagname style=\"property:value;\"&gt;property is CSS property, value is CSS value.major properties are below background-color color font-family font-size text-align border padding margin float7. HTML Formatting Elements bold: &lt;b&gt; important: &lt;strong&gt; italic: &lt;i&gt; emphasized: &lt;em&gt; marked: &lt;mark&gt; smaller: &lt;small&gt; deleted: &lt;del&gt; inserted: &lt;ins&gt; subscript: &lt;sub&gt; superscript: &lt;sup&gt;8. HTML Quotation and Citation Elements block quote: &lt;blockquote&gt; adds new block of quote short quote: &lt;q&gt; adds quotation mark abbreviations: &lt;abbr&gt; adds dotted line. use this with title attribute contact info: &lt;address&gt; defines contact info with italic work title: &lt;cite&gt; defines title of work with italic9. HTMl Comment&lt;!-- Write yout comments --&gt;10. HTML Styles- CSS Inline By using style attribute in elements. Internal &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;style&gt; body {background-color: powderblue;} h1 {color: blue;} p {color: red;} &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; External &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; 11. HTML Links Target Attribute _self: current tab _blank: new tab _parent: parent frame _top: full body of the window Can use image as a link Link to an email address &lt;a href=\"mailto:someone@example.com\"&gt;Send email&lt;/a&gt; Add title to link Different colors: define style using internal CSS style a:link: default a:visited: visited a:hover: hovered a:active: pressing Link other elements using id &lt;h2 id=\"C4\"&gt;Chapter 4&lt;/h2&gt; &lt;a href=\"#C4\"&gt;Jump to Chapter 4&lt;/a&gt; &lt;a href=\"html_demo.html#C4\"&gt;Jump to Chapter 4&lt;/a&gt; 12. HTML Images Images Alows animated images by using gif format Use float CSS property to merge image with texts Image Maps Background Image &lt;p style=\"background-image: url('img_girl.jpg');\"&gt; &lt;style&gt; body {background-image: url('img_girl.jpg');} background-repeat: no-repeat; &lt;/style&gt; By using background-repeat property, you can avoid repeating images. &lt;picture&gt; Element &lt;picture&gt; &lt;source media=\"(min-width: 650px)\" srcset=\"img_food.jpg\"&gt; &lt;source media=\"(min-width: 465px)\" srcset=\"img_car.jpg\"&gt; &lt;img src=\"img_girl.jpg\"&gt; &lt;/picture&gt; &lt;picture&gt; &lt;source srcset=\"img_avatar.png\"&gt; &lt;source srcset=\"img_girl.jpg\"&gt; &lt;img src=\"img_beatles.gif\" alt=\"Beatles\" style=\"width:auto;\"&gt; &lt;/picture&gt; Use Picture Element when your image might be too big for some devices. Also, you can use this to give various formats of same image to browser. 13. Favicon&lt;link rel=\"icon\" type=\"image/x-icon\" href=\"/images/favicon.ico\"&gt;14. HTML Table&lt;table&gt; &lt;tr&gt; &lt;th&gt;Company&lt;/th&gt; &lt;th&gt;Contact&lt;/th&gt; &lt;th&gt;Country&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Alfreds Futterkiste&lt;/td&gt; &lt;td&gt;Maria Anders&lt;/td&gt; &lt;td&gt;Germany&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Centro comercial Moctezuma&lt;/td&gt; &lt;td&gt;Francisco Chang&lt;/td&gt; &lt;td&gt;Mexico&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;15. HTML Lists Unordered List &lt;ul&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ul&gt; Ordered List &lt;ol&gt; &lt;li&gt;Coffee&lt;/li&gt; &lt;li&gt;Tea&lt;/li&gt; &lt;li&gt;Milk&lt;/li&gt;&lt;/ol&gt; 16. HTML Block and Inline Block-level Elements &lt;div&gt;: divide area &lt;p&gt;: add paragraph -&gt; cannot include block elements Inline Elements &lt;span&gt;: inline container 17. HTML Class&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;.note { font-size: 120%; color: red;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;My &lt;span class=\"note\"&gt;Important&lt;/span&gt; Heading&lt;/h1&gt;&lt;p&gt;This is some &lt;span class=\"note\"&gt;important&lt;/span&gt; text.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;Used to access elements from style sheet or javascript.One element can have multiple classes and different types of elements can have same class.18. Html IDid attribute is used to specify a unique id for an element.Difference between class is its uniqueness.&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;#myHeader { background-color: lightblue; color: black; padding: 40px; text-align: center;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=\"myHeader\"&gt;My Header&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;19. HTML iframes&lt;iframe src=\"demo_iframe.htm\" name=\"iframe_a\" title=\"Iframe Example\"&gt;&lt;/iframe&gt;&lt;p&gt;&lt;a href=\"https://www.w3schools.com\" target=\"iframe_a\"&gt;W3Schools.com&lt;/a&gt;&lt;/p&gt;iframe can be targetted by hyperlink.20. HTML Forms &lt;form&gt; element is used to create HTML form for user input. action attribute: defines the action to be performed when the form is submitted. target attribute: defines where to display the response after submitting the form _self: current tab _blank: new tab _parent: parent frame _top: full body of window framename: iframe method attribute: specifies http method to be used when submitting the data get post autocomplete attribute: specifies whether to auto complete the form with user’s past records. novalidate attribute: when present, means not to validate submitted data. 21. HTML Form elements&lt;form&gt; element can contain one or more of following form elements. &lt;input&gt; &lt;label&gt; &lt;select&gt; The &lt;select&gt; element defines a drop-down list: &lt;label for=\"cars\"&gt;Choose a car:&lt;/label&gt; &lt;select id=\"cars\" name=\"cars\" size=\"4\" multiple&gt; &lt;option value=\"volvo\" selected&gt;Volvo&lt;/option&gt; &lt;option value=\"saab\"&gt;Saab&lt;/option&gt; &lt;option value=\"fiat\"&gt;Fiat&lt;/option&gt; &lt;option value=\"audi\"&gt;Audi&lt;/option&gt; &lt;/select&gt; Attribute size defines visible values, and multiple defines whether multiple selection is possible. &lt;textarea&gt; The &lt;textarea&gt; element defines a multi-line input field (a text area): &lt;textarea name=\"message\" rows=\"10\" cols=\"30\"&gt; The cat was playing in the garden. &lt;/textarea&gt; &lt;button&gt; The &lt;button&gt; element defines a clickable button: &lt;button type=\"button\" onclick=\"alert('Hello World!')\"&gt;Click Me!&lt;/button&gt; &lt;fieldset&gt; and &lt;legend&gt; makes group, and add title. &lt;form action=\"/action_page.php\"&gt; &lt;fieldset&gt; &lt;legend&gt;Personalia:&lt;/legend&gt; &lt;label for=\"fname\"&gt;First name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"&gt;&lt;br&gt; &lt;label for=\"lname\"&gt;Last name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"&gt;&lt;br&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit\"&gt; &lt;/fieldset&gt; &lt;/form&gt; &lt;datalist&gt; Specifies a list of pre-defined options for &lt;input&gt; element &lt;form action=\"/action_page.php\"&gt; &lt;input list=\"browsers\"&gt; &lt;datalist id=\"browsers\"&gt; &lt;option value=\"Internet Explorer\"&gt; &lt;option value=\"Firefox\"&gt; &lt;option value=\"Chrome\"&gt; &lt;option value=\"Opera\"&gt; &lt;option value=\"Safari\"&gt; &lt;/datalist&gt; &lt;/form&gt; list attribute must refer to id of datalist. &lt;output&gt; &lt;option&gt; &lt;optgroup&gt;22. HTML Input Types text:single line text input &lt;form&gt; &lt;label for=\"fname\"&gt;First Name: &lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"fname\" name=\"fname\" value=First Name&gt;&lt;br&gt; &lt;/form&gt; radio: select one of many &lt;form&gt; &lt;input type=\"radio\" id=\"css\" name=\"survey\" value=\"CSS&gt; &lt;label for=\"css\"&gt;CSS&lt;/label&gt;&lt;br&gt; &lt;input type=\"radio\" id=\"html\" name=\"survey\" value=\"HTML&gt; &lt;label for=\"html\"&gt;HTML&lt;/label&gt;&lt;br&gt; &lt;/form&gt; &lt;input&gt;’s attribute name should be same and always needs value attribute. checkbox: select zero or more of many &lt;form&gt; &lt;input type=\"checkbox\" id=\"vehicle1\" name=\"vehicle1\" value=\"Bike\"&gt; &lt;label for=\"vehicle1\"&gt; I have a bike&lt;/label&gt;&lt;br&gt; &lt;input type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" value=\"Car\"&gt; &lt;label for=\"vehicle2\"&gt; I have a car&lt;/label&gt;&lt;br&gt; &lt;input type=\"checkbox\" id=\"vehicle3\" name=\"vehicle3\" value=\"Boat\"&gt; &lt;label for=\"vehicle3\"&gt; I have a boat&lt;/label&gt; &lt;/form&gt; &lt;input&gt; always needs value attribute. submit: submit the form &lt;form action=\"/action_page.php\"&gt; &lt;label for=\"fname\"&gt;First name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"&gt;&lt;br&gt; &lt;label for=\"lname\"&gt;Last name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"&gt;&lt;br&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit\"&gt; &lt;/form&gt; Defines a button for submitting the form data to a form-handler. button: clickable button password: defines password field &lt;form&gt; &lt;label for=\"username\"&gt;Username:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"username\" name=\"username\"&gt;&lt;br&gt; &lt;label for=\"pwd\"&gt;Password:&lt;/label&gt;&lt;br&gt; &lt;input type=\"password\" id=\"pwd\" name=\"pwd\"&gt; &lt;/form&gt; characters in the field gets masked. reset: reset all form values to their default values &lt;form action=\"/action_page.php\"&gt; &lt;label for=\"fname\"&gt;First name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"fname\" name=\"fname\" value=\"John\"&gt;&lt;br&gt; &lt;label for=\"lname\"&gt;Last name:&lt;/label&gt;&lt;br&gt; &lt;input type=\"text\" id=\"lname\" name=\"lname\" value=\"Doe\"&gt;&lt;br&gt;&lt;br&gt; &lt;input type=\"submit\" value=\"Submit\"&gt; &lt;input type=\"reset\"&gt; &lt;/form&gt; button &lt;input type=\"button\" onclick=\"alert('Hello World!')\" value=\"Click Me!\"&gt; color: gets input of a color &lt;form&gt; &lt;label for=\"favcolor\"&gt;Select your favorite color:&lt;/label&gt; &lt;input type=\"color\" id=\"favcolor\" name=\"favcolor\"&gt; &lt;/form&gt; date &lt;form&gt; &lt;label for=\"birthday\"&gt;Birthday:&lt;/label&gt; &lt;input type=\"date\" id=\"birthday\" name=\"birthday\"&gt;&lt;/form&gt; datetime-localincludes time. email &lt;form&gt; &lt;label for=\"email\"&gt;Enter your email:&lt;/label&gt; &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;&lt;/form&gt; Some browsers automatically validate the input, and some smartphones add .com key to its keyboard. image: defines an image as a submit button &lt;input type=\"image\" src=\"img_submit.gif\" alt=\"Submit\" width=\"48\" height=\"48\"&gt; file &lt;form&gt; &lt;label for=\"myfile\"&gt;Select a file:&lt;/label&gt; &lt;input type=\"file\" id=\"myfile\" name=\"myfile\"&gt;&lt;/form&gt; hidden: defines hidden input file &lt;form&gt; &lt;label for=\"fname\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" id=\"fname\" name=\"fname\"&gt;&lt;br&gt;&lt;br&gt; &lt;input type=\"hidden\" id=\"custId\" name=\"custId\" value=\"3487\"&gt; &lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt; number range search: behaves like a regular text field tel: telephone number time url23. HTML Input Attributes value: initial value readonly disabled size: width of a input field maxlength min, max multiple: allow user to select multiple files pattern placeholder: specifies hint value required step autofocus list autocomplete" }, { "title": "css 공부 정리", "url": "/posts/css-%EA%B3%B5%EB%B6%80/", "categories": "Code, Web, Frontend", "tags": "css, frontend", "date": "2024-07-16 03:00:00 +0000", "snippet": "1. CSS Syntaxh1 {color:blue; font-size:12px;}h1: selector, points to the HTML elementcolor: propertyblue: value2. CSS Selector element selector id selector #paral {color: red;} class se...", "content": "1. CSS Syntaxh1 {color:blue; font-size:12px;}h1: selector, points to the HTML elementcolor: propertyblue: value2. CSS Selector element selector id selector #paral {color: red;} class selector .center {color: red;}p.center {color: blue;} universal selector * {color: blue} grouping selector h1, h2, p { text-align: center; color: red;} 3. How To Add CSS External Internal InlineIf multiple styles are defined for single element, styles are applied by following order. Inline External and Internal(follows order they are defined) Browser default4. CSS Coments/*comments*/5. CSS Colors background-color color borderColor is specified by color name HEX value RGB value&lt;h1 style=\"background-color:rgb(255, 148, 71);\"&gt;Hello World&lt;/h1&gt;&lt;h1 style=\"background-color:rgb(255, 148, 71, 0.5);\"&gt;Hello World&lt;/h1&gt;&lt;!--rgba--&gt;&lt;h1 style=\"color:#ff6347;\"&gt;Hello World&lt;/h1&gt;&lt;h1 style=\"border:2px solid Tomato;\"&gt;Hello World&lt;/h1&gt;6. CSS Backgrounds background-color opacity: transparancey div {background-color: green;opacity: 0.3;} Different with using rgba. rgba does not soften child elements(ex: texts) background-image body {background-image: url(\"paper.gif\");} background-repeat repeat-x / no-repeat / repeat-y background-position ex: right top background-attachment fixed(always displayed)/ scroll backgorund(short hand property) body {background-color: #ffffff;background-image: url(\"img_tree.png\");background-repeat: no-repeat;background-position: right top;}body {background: #ffffff url(\"img_tree.png\") no-repeat right top;}/*both code makes same result*/ 7. CSS Borders border-style dotted/ dashed/ solid/ double/ groove/ ridge/ inset/ outset/ none/ hidden p.mix {border-style: dotted dashed solid double;} border-width thin/ medium/ thick/ px/ cm opacity border-color name/ HEX/ RGB/ RGBA/ HSL border-(top/ right/ bottom/ left)-style We can make same result using border-style, width, color. four values: clockwise three values: top, right and left, bottom order two values: top and bottom, right and bottom order one value: all border border(short hand property) p {border: 5px solid red;}p {border-left: 6px solid red;} border-radius Defines roundness of border. p {border: 2px solid red;border-radius: 5px;} 8. CSS MarginsDefines space outside of borders.Use margin-(top/ right/ bottom/ left) or short hand method.Margins are defined by folling methods. auto: browser calculates the margin -&gt; centered length: specifies margin in px, pt, cm,… %: specifies a margin in % of the width of the containing element inherit: specifies that margin properties are inherited from its parent elementTop and bottom margins of elements are sometimes collapsed into a single margin that is equal to the largest of the two margins.This result can be made deliberately by using negative values.9. CSS PaddingDefines space between element’s content and border.Same usage with margin, except absense of auto and negative value.Problem that may occur is, when using padding with width or height property, the actual size may differ with intended one, because actual size is decided by size + padding, not size.This problem can be solved by using box-sizing property.div { width: 300px; padding: 25px; box-sizing: border-box;}/*actual size is restricted to 300px*/10. CSS Height, Width and Max-width Height, Width Defines height and width of element. This does not include padding, borders, or margins. auto/ length/ %/ initial/ inherit Max-width Used to set the maximum width of an element. Prevents browser adds horizontal scrollbar.11. CSS OutlineDefines line between margin and border/edge outline-style dotted/ dashed/ solid/ double/ groove/ ridge/ inset/ outset/ none/ hidden outline-color outline-width outline-offset: adds space between an outline and border/edge of elenet outline(short hand method)12. CSS Text color text-align: center/ left/ right/ justify text-align-last defines how to align the last line center/ left/ right/ justify direction: rtl/ ltr verical-align: baseline/ text-top/ text-bottom/ sub/ super text decoration text-decoration-line: overline/ line-through/ underline/ overline underline text-decoration-color text-decoration-style: solid/ double/ dotted/ dashed/ wavy text-decoration-thickness text-decoration: none for no line(link) text-transform: uppercase/ lowercase/ capitalize text spacing text-indent letter-spacing line-height word-spacing white-space: unwrap/ normal/ pre text-shadow horizontal, vertical, blur, color h1 {color: white;text-shadow: 2px 2px 4px #000000;} 13. CSS Fonts font-family: hold several font names as a fallback system font-size Google Fonts &lt;head&gt;&lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong\"&gt;&lt;style&gt;h1.a {font-family: \"Audiowide\", sans-serif;}h1.b {font-family: \"Sofia\", sans-serif;}h1.c {font-family: \"Trirong\", serif;}&lt;/style&gt;&lt;/head&gt; 14. CSS Icons&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=\"https://kit.fontawesome.com/a076d05399.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;i class=\"fas fa-cloud\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-heart\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-car\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-file\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-bars\"&gt;&lt;/i&gt;&lt;/body&gt;&lt;/html&gt;15. CSS Linkslink, hover, visited, active Order must be followed: link, visited -&gt; hover -&gt; actvebackground-color, text-decoration,…16. CSS Lists list-style-type: circle/ square/ upper-roman/ lower-alpha/ none/ url(‘image_source’) list-style-position: outside/ inside17. CSS Tables Borders table, th, td { border: 1px solid;} To avoid double border, try this. table { border-collapse: collapse;} Size table { width: 100%;}th { height: 70px;} Alignment text-align vertical-align Style padding border hover,… nth-child(even) Responsive &lt;div style=”overflow-x: auto;”&gt;18. CSS DisplayEvery HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline. Block-level Elelments Starts on new line and takes up the full width availableex) div, h1, p, form, header, footer, section Inline Elements Does not start on new line and only takes up as much width as necessaryex) span, a, img display: block/ inline/ inline-block/ flex/ none none is different with “visibility: hidden”, in whether it takes space.19. CSS Max-WidthUsing max-width property instead of width, browser does not add horizontal scrollbar.20. CSS Position static Element positions where it should have been. Top, Bottom,… properties are ignored. relative Element positions relative to where it should have been. Top, Bottom,… properties are used. absolute Element positions relative to the nearest positioned(not static) ancestor. The recursion continues ubtil it meets body element. fixed Element positions relative to th viewport(window), which means it always stays in the same place even if the page is scrolled. sticky It is positions relative until a given offset position is met in the viewport like position: fixed21. CSS z-indexSpecifies the stack order of an element.z-index property only works on positioned elements an flex items.22. CSS Overflow visible: default, renders outside the element’s box hidden: overflowed contents are invisible scroll: scrollbar is added for the overflowed contents auto: add scrollbars only when necesarry div {overflow-x: hidden; /* Hide horizontal scrollbar */overflow-y: scroll; /* Add vertical scrollbar */} 23. CSS float and clear float Used for positioning and formatting content, let an image float left to the text in a container. left/ right/ none/ inherit clear Used when we want element which is next to float element to move below. left/ right/ both/ none/ inherit When floated element is taller than the containing element, it will overflow -&gt; use clearfix hack. .clearfix { overflow: auto;} But using pseudo-element is better. examples * { box-sizing: border-box;}.box { float: left; width: 33.33%; padding: 50px; /* if you want space between the images */} To fix heights of boxes, it is best to use flex-box. .flex-container { display: flex; flex-wrap: nowrap; background-color: DodgerBlue; } .flex-container .box { background-color: #f1f1f1; width: 50%; margin: 10px; text-align: center; line-height: 75px; font-size: 30px; }To make navigation bar, you can use “float: left” or “display: inline-block”.24. CSS Horizontal &amp; Vetical Align center horizontally box element: “margin: auto” text: “text-align: center” image: use “display: box” and “margin: auto” left and right position: absolute float: left(right) center vertically padding line-height .center { line-height: 200px; height: 200px; border: 3px solid green; text-align: center;}/* If the text has multiple lines, add the following: */.center p { line-height: 1.5; display: inline-block; vertical-align: middle;} flex box .center {display: flex;justify-content: center;align-items: center;height: 200px;border: 3px solid green;} 25. CSS Combinators Descendant selector: (space) child selector: &gt; adjacent sibling selector: + general sibling selector: ~26. CSS Pseudo-classes Syntaxselector:pseudo-class { property: value} tooltopp { display: none; background-color: yellow; padding: 20px;}div:hover p { display: block;} dynamic pseudo-classes :link :visited :hover :active :focus :target :in-range :out-of-range :valid :invalid state pseudo-classes :read-only :read-write :required :optional :checked :enabled :disabled structural pseudo-classes :first-child(last) :nth-child :first-of-type(last) :nth-of-type :only-of-type :only-child etc :not :lang```html Some text A quote in a paragraph Some text. ``` 27. CSS Pseudo-elementsUsed to style specified parts of an element. ::first-line can only applied to block-level elements ::first-letter ::before h1::before { content: url(smiley.gif);} ::after ::marker selects the markers of list items. ::selection ::selection { color: red; background: yellow; } matches the portion of an element that is selected by a user.27. CSS Navigation Bar Vertical&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;body { margin: 0;}ul { list-style-type: none; margin: 0; padding: 0; width: 25%; background-color: #f1f1f1; position: fixed; height: 100%; overflow: auto;}li a { display: block; color: #000; padding: 8px 16px; text-decoration: none;}li a.active { background-color: #04AA6D; color: white;}li a:hover:not(.active) { background-color: #555; color: white;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt; &lt;li&gt;&lt;a class=\"active\" href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#news\"&gt;News&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=\"margin-left:25%;padding:1px 16px;height:1000px;\"&gt; &lt;h2&gt;Fixed Full-height Side Nav&lt;/h2&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; Horizontal&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;style&gt;body {margin:0;}ul { list-style-type: none; margin: 0; padding: 0; overflow: hidden; background-color: #333; position: fixed; top: 0; width: 100%;}li { float: left;}li a { display: block; color: white; text-align: center; padding: 14px 16px; text-decoration: none;}li a:hover:not(.active) { background-color: #111;}.active { background-color: #04AA6D;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt; &lt;li&gt;&lt;a class=\"active\" href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#news\"&gt;News&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#about\"&gt;About&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=\"padding:20px;margin-top:30px;background-color:#1abc9c;height:1500px;\"&gt; &lt;h1&gt;Fixed Top Navigation Bar&lt;/h1&gt; &lt;h2&gt;Scroll this page to see the effect&lt;/h2&gt; &lt;h2&gt;The navigation bar will stay at the top of the page while scrolling&lt;/h2&gt; &lt;p&gt;Some text some text some text some text..&lt;/p&gt; &lt;p&gt;Some text some text some text some text..&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;28. CSS Dropdowns&lt;style&gt;.dropbtn { background-color: #4CAF50; color: white; padding: 16px; font-size: 16px; border: none; cursor: pointer;}.dropdown { position: relative; display: inline-block;}.dropdown-content { display: none; position: absolute; background-color: #f9f9f9; min-width: 160px; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1;}.dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block;}.dropdown-content a:hover {background-color: #f1f1f1}.dropdown:hover .dropdown-content { display: block;}.dropdown:hover .dropbtn { background-color: #3e8e41;}&lt;/style&gt;&lt;div class=\"dropdown\"&gt; &lt;button class=\"dropbtn\"&gt;Dropdown&lt;/button&gt; &lt;div class=\"dropdown-content\"&gt; &lt;a href=\"#\"&gt;Link 1&lt;/a&gt; &lt;a href=\"#\"&gt;Link 2&lt;/a&gt; &lt;a href=\"#\"&gt;Link 3&lt;/a&gt; &lt;/div&gt;&lt;/div&gt;" }, { "title": "정수론(2) 나머지로 보는 세상", "url": "/posts/%EC%A0%95%EC%88%98%EB%A1%A0(2)-%EB%82%98%EB%A8%B8%EC%A7%80%EB%A1%9C-%EB%B3%B4%EB%8A%94-%EC%84%B8%EC%83%81/", "categories": "Math, Number Theory", "tags": "Math, Number Theory", "date": "2023-01-07 03:00:00 +0000", "snippet": "1. 합동식1-1. 합동과 나머지가약성은 수론에서 엄청나게 강력한 도구이다. 이러한 가약성을 다르게 설명하는 방법이 있다. 바로 합동이다.$m$이 $a-b$를 나눌 때, 즉 $m|(a-b)$ 일때, $a$와 $b$가 법 $m$에대해 합동이다 라고 한다. 그리고 이를\\[a \\equiv b \\pmod{m}\\]로 표기한다.예를 들어, $a$를 $m$으로 나...", "content": "1. 합동식1-1. 합동과 나머지가약성은 수론에서 엄청나게 강력한 도구이다. 이러한 가약성을 다르게 설명하는 방법이 있다. 바로 합동이다.$m$이 $a-b$를 나눌 때, 즉 $m|(a-b)$ 일때, $a$와 $b$가 법 $m$에대해 합동이다 라고 한다. 그리고 이를\\[a \\equiv b \\pmod{m}\\]로 표기한다.예를 들어, $a$를 $m$으로 나눈 나머지가 $r$이면, $a \\equiv r\\pmod{m}$가 성립한다. 즉 합동을 통해 가약성 이론을 방정식 처럼 표현할 수 있게되는 것이다.1-2. 합동의 성질 $a \\equiv b \\pmod{m}$이면, $a \\pm c\\equiv b\\pm c \\pmod{m}$이다. $a \\equiv b \\pmod{m}$이면, $ac \\equiv bc \\pmod{m}$이다. $(a,m)=1$인 경우에만, $ac \\equiv bc \\pmod{m}$ 이면 $a \\equiv b \\pmod{m}$이다.1, 2, 3 모두, 합동이면 $m|(a-b)$라는 성질을 활용하면 쉽게 증명할 수 있다.1-3. 일차 합동방정식의 풀이합동방정식의 풀이도 일반 방정식과 크게 다르지 않다. 덧셈과 뺄셈, 곱셈, 그리고 조건에 따라 나눗셈도 허용이 되기 때문에, 이를 잘 활용하여 풀면 된다.그러나 해가 언제나 존재하는 것은 아니다. 합동방정식 $ax \\equiv c \\pmod{m}$이 있을 때, 해가 존재할 조건은 $(a,m)|c$이다. 이는 선형 방정식 $ax + by = c$의 해가 존재할 조건이 $(a,b)|c$임과 동치이다.해를 구하는 방법은 크게 두 가지 방법이 있다. 유클리드 호제법 $ax \\equiv c \\pmod{m}$에서 $d=(a,m)$을 구한다. $a_1=a/d$, $c_1=c/d$, $m_1=m/d$를 계산한다. 유클리드 호제법으로 $a_1 x + m_1 y = c_1$의 특수해, $x_0$를 구한다. 법 $m_1$을 법 $m$으로 확장시키면, 일반해 $x \\equiv x_0, \\ x_0+m_1, \\ ….\\ \\ x_0+(d-1)m_1$을 구할 수 있다. 역원을 사용해서 위와 동일하게, $a_1x \\equiv c_1 \\pmod{m_1}$으로 변형시킨다. 법 $m_1$에 대한 $a_1$의 역원 $a_1^* $을 구한다. $a_1^* \\cdot a_1x \\equiv x \\equiv a_1^* \\cdot c_1 \\pmod {m_1}$을 통해 특수해를 구한다. 위와 동일하게 법 $m_1$을 법 $m$으로 확장시킨다. 2에서 역원이 존재함은 $(a_1,m_1)=1$이기 때문이다. 즉, 해는 $ (a,m) |c $ 일 때 존재하고, 해의 개수는 $(a,m)$이다.2. 합동에 대한 정리들2-1. 나머지 집합$\\mathbb{Z}/{n\\mathbb{Z}}:= [0, 1, 2, 3, …. \\ n-1]$을 나머지 환, 즉 $n$으로 나눈 나머지들만 모아 둔 집합이라고 정의하자.이와 유사하게, $(\\mathbb{Z}/{n\\mathbb{Z}})^x := [k \\in \\mathbb{Z}: \\ 0&lt;k&lt;n, (k,n)=1]$, 즉 역원이 존재하는 원소만 모아둔 나머지 환이라고 정의하고자 한다. 예를 들어 $(\\mathbb{Z}/{6\\mathbb{Z}})^x := [1, 5]$이다.소수인 $p$의 경우, $\\mathbb{Z}/{p\\mathbb{Z}} = (\\mathbb{Z}/{p\\mathbb{Z}})^x$임을 생각해볼 수 있을 것이다.이를 통해서 합동에 대한 몇가지 정리들을 증명하고자 한다.2-2. 윌슨의 정리윌슨의 정리:\\[(p-1)! \\equiv -1\\pmod p\\]증명.$a \\in (\\mathbb{Z}/{p\\mathbb{Z}})^x$에 대해 $a=a^* $인 $a$를 생각해보자.$a^2\\equiv 1\\pmod p$이므로, $(a-1)(a+1)\\equiv 0 \\pmod p$이고, $p|(a-1)(a+1)$이 성립한다.$p$가 소수이므로, $p|a-1$ 또는 $p|a+1$이다. 즉, $a\\equiv1 \\pmod p$ 또는 $a \\equiv -1 \\pmod p$이다.즉 $(\\mathbb{Z}/{p\\mathbb{Z}})^x$에서 $1$과 $p-1$를 제외하고는, 역수끼리 서로를 짝 지어줄 수 있다.$(p-1)! = 1 \\cdot (p-1) \\cdot (b \\cdot b^* ) \\cdot (c \\cdot c^* ) \\cdot\\cdot\\cdot \\equiv 1\\cdot(-1)\\cdot1\\cdot1\\cdot\\cdot\\cdot\\equiv-1\\pmod p$가 성립한다.2-3 페르마의 소정리페르마의 소정리:\\[a^{(p-1)}\\equiv1\\pmod p \\ \\ \\ if \\ p \\ is \\ prime \\ and \\ (a,p)=1\\]증명.$(\\mathbb{Z}/{p\\mathbb{Z}})^x$의 원소에 $a$를 모두 곱해주어도 결국 $(\\mathbb{Z}/{p\\mathbb{Z}})^x$와 같은 집합이다.이는 만약 $1\\leq k,j \\leq p$ 일때, $ka \\equiv ja\\pmod p$이면, $k=j$임을 통해 증명할 수 있다. $p|a(k-j)$이면 $p|a$ 또는 $p|k-j$인데, $(a,p)=1$이고 $-1+p&lt;k-j&lt;p-1$이므로 $p\\nmid a$ 이고 $p\\nmid k-j$에 따라 $k=j$이 참이다.따라서 $(p-1)! \\equiv a\\cdot 2a \\cdot\\cdot\\cdot (p-1)a \\pmod p$이 성립하고, $(p-1)!$의 역수가 존재하므로, 양변에 $(p-1)!$을 곱하면, $a^{(p-1)}\\equiv1\\pmod p$가 된다.이 정리를 통해, 매우 효율적으로 어떤 수의 소수 여부를 판별할 수 있다. $n$이 어떤 $a$에 대해 $a^{(n-1)}\\not\\equiv 1\\pmod n$라면, $n$은 반드시 합성수이다. 반면, 페르마의 소정리의 역은 성립하지 않으므로, $(a,n)=1$인 모든 $a$에 대해 $a^{(n-1)}\\equiv 1\\pmod n$ 가 성립한다고 하더라도, $n$은 높은 확률로 소수라고 말할 수 있을 뿐이지, 반드시 소수는 아니다. 이렇게 페르마의 소정리를 활용한 소수판정법을 뚫는 수를 카마이클 수라고 한다.2-4 오일러 정리오일러 정리:\\[a^{\\phi(n)} \\equiv 1 \\pmod n \\ \\ \\ if \\ (a,n)=1, \\ \\ \\phi(n)=\\sharp[(\\mathbb{Z}/{n\\mathbb{Z}})^x]\\]페르마의 소정리와 엄청 비슷하게 생겼다. 왜냐하면 페르마의 소정리를 소수 뿐만이 아닌 모든 정수로 확장시킨 것이 오일러 정리이기 때문. $n$에 소수를 대입해도 그대로 잘 작동한다. 증명과정도 거의 동일하므로 생략하고자 한다.이 정리를 통해, $\\phi(n)$의 값을 알고 있다면, modular exponention을 엄청 간단하게 바꿀 수 있다. 예를 들어, $3^{121}\\pmod{10}$을 계산한다고 하자. $3^{4} \\equiv 1\\pmod{10}$이므로, $3^{121} \\equiv 3^{4\\cdot30\\cdot1} \\equiv 3\\pmod{10}$임을 쉽게 계산할 수 있다. 문제는 $\\phi(n)$의 값을 계산할 줄 알아야 한다는 점인데, 지금부터 알아보도록 한다.3. 오일러함수 $\\phi(n)$3-1. $\\phi(n)$오일러 함수 $\\phi(n)$를 어떻게 하면 쉽게 계산할 수 있을까?우선 소수의 경우, $\\phi(p)=p-1$임은 간단하다. 그리고 이를 활용하면, $\\phi(p^r)$도 쉽게 구할 수 있다. $1\\leq a \\leq p^r$인 $a$에 대해 $(a,p)\\neq1$인 $a$는 $p|a$를 만족한다. 즉 $p, \\ 2p, \\ 3p, … \\ p^{r-1}\\cdot p$ 이며 $p^{r-1}$개 존재한다. 따라서\\[\\phi(p^r) = p^r - p^{r-1}\\]이다.그렇다면 일반적인 합성수, $m=p_1^{r_1}\\cdot p_2^{r_2}\\cdot p_3^{r_3}\\cdot p_4^{r_4}\\cdot\\cdot\\cdot p_k^{r_k}$에 대한 $\\phi(m)$은 어떻게 계산할까.3-2. 나머지 집합의 구조위에서 나머지 집합 $(\\mathbb{Z}/{n\\mathbb{Z}})$을 정의하였다. 여기서 가장 중요한 포인트는,\\[(\\mathbb{Z}/{mn\\mathbb{Z}}) \\simeq (\\mathbb{Z}/{m\\mathbb{Z}}) \\times (\\mathbb{Z}/{n\\mathbb{Z}}) \\ \\ if \\ (m,n)=1\\]라는 것이다.즉, $(\\mathbb{Z}/{mn\\mathbb{Z}})$의 원소를 $(\\mathbb{Z}/{m\\mathbb{Z}})\\times (\\mathbb{Z}/{n\\mathbb{Z}})$의 원소로 일대일 대응이 존재한다는 것이다.예를 들어 $m=3, \\ n=5$일때, $7\\rightarrow(1,2)$가 존재하고, $3\\leftarrow (0,3)$이 존재한다.만약 이것이 참이라면, 이를 통해 다음 식 또한 참임을 알 수 있다.\\[\\phi(mn) = \\phi(m)\\cdot\\phi(n) \\ \\ if \\ (m,n)=1\\]3-3 중국인의 나머지 정리일대일 대응이 존재한다는 것은, 다음과 동치이다. 첫번째 집합에서 서로 다른 수를 고르면, 두번째 집합에서 서로 다른 순서쌍에 대응된다. 두번째 집합의 모든 순서쌍은 이에 대응되는 첫번째 집합의 수를 찾을 수 있다.1번의 증명은 어렵지 않으니 생략하고자 한다.2번의 증명은 중국인의 나머지 정리를 통해 증명할 수 있다.중국인의 나머지 정리:\\[x\\equiv b\\pmod m \\ and \\ x\\equiv c\\pmod n \\\\ has \\ unique \\ solution \\ \\ if \\ (m,n)=1\\]이는 $x=my+b$로 둔다. $my \\equiv c-b \\pmod n$의 유일 해를 구할 수 있다.를 통해 쉽게 증명할 수 있다.따라서 $\\phi(mn) = \\phi(m)\\cdot\\phi(n) \\ \\ if \\ (m,n)=1$이 성립한다.3-4 $\\sum_{d|n}\\phi(d) = n$의 증명두 가지의 증명법이 있다. $n$이 소수일 때를 base case로서 증명하고, 이를 일반화하는 방법 $\\sum_{d|n}\\phi(d) = \\sum_{d|n}\\phi(n/d)$임을 활용하는 방법1번은 $\\phi$의 곱셈 성질을 사용하면 간단하기 때문에, 2번의 방법을 설명하고자 한다.$1 \\sim n$까지의 정수를, n의 약수들, $d_1, \\ d_2, \\ …\\ , \\ d_r$의 배수들로 분류해보고자 한다. 즉, $(n,a)=1$인 a의 집합, $(n,a)=d_1$인 a의 집합, … $(n,a)=n$인 a의 집합, 즉 $n$의 약수 만큼의 집합으로 나눈다. 이들 집합은 교집합이 없고, 전부 합치면, 다시 $1 \\sim n$의 수가 된다.$(n,a)=d_i$인 a의 집합을 $A_{di}$라고 하자. 주장하고 싶은 것은, $\\sharp A_{di} = \\phi(n/d_i)$라는 것이다.$A_{di} = [d_ik: \\ 1\\leq k \\leq n/d_i]$라고 다시 표현할 수 있다. 이 집합은 $(d_i,n)=d(k,n/d_i)=d_i$, 즉 $(k,n/d_i)=1$를 만족해야하고, 이는 $\\sharp A_{di} = \\phi(n/d_i)$가 참임을 증명한다.4. 원시근 정리4-1 원시근$(\\mathbb{Z}/{p\\mathbb{Z}})^x$의 흥미로운 점은, $(\\mathbb{Z}/{p\\mathbb{Z}})^x$의 어떤 원소 $a$를 제곱함을 통해 $(\\mathbb{Z}/{p\\mathbb{Z}})^x$의 모든 원소를 얻을 수 있다는 점이다. 예를 들어 $p=5$인 경우, $2^1, 2^2, 2^3, 2^4$를 통해 $(\\mathbb{Z}/{p\\mathbb{Z}})^x$의 모든 원소를 표현할 수 있다.이런 원소 $a$를 원시근이라고 하고, $a^i \\not \\equiv1\\pmod p \\ \\ if \\ 1\\leq i &lt; p-1$이라고 정의한다. 이는 $i&lt;p-1$ 일때 $a^i \\equiv 1\\pmod p$이면 순환이 생긴다는 점에서 자연스럽게 받아들일 수 있다.4-2 위수의 성질법 $p$에 대한 $a$의 위수를 $ord_p(a)$라고 표기하기로 약속하고, 다음과 같이 정의한다.\\[ord_p(a) = [a^i\\equiv 1\\pmod p를 만족하는 최소의 i]\\]즉 $a$가 $p$의 원시근이 되기 위해서는, $ord_p(a)=p-1$이 되어야한다.이와 같은 위수에는 성질이 있는데, $ord_p(a)\\leq p-1$ $ord_p(a)|n, \\ \\ if \\ a^n \\equiv \\pmod p$1번은 페르마의 소정리를 통해 쉽게 증명할 수 있다.2번은 나눗셈 정리를 통해 증명할 수 있다. 특히, 이를 통해 $ord_p(a)|p-1$임을 알 수 있다.4-3 원시근 정리와 증명원시근 정리:\\[모든 \\ 소수 \\ p는 \\ \\phi(p-1)개의 \\ 원시근을 \\ 가진다.\\]도움 정리. 법 $p$에 대한 다항식의 근의 정리\\[f(x)=a_0x^d + a_1x^{d-1} + \\cdot\\cdot\\cdot +a_d에 \\ 대하여 \\ p\\nmid a_0을 \\ 만족하면 \\\\ f(x)\\equiv0\\pmod p은 \\ 최대 \\ d개의 \\ 서로 \\ 다른 \\ 해를 \\ 가짐\\]이 도움 정리는 귀류법을 사용하면 어렵지 않게 증명할 수 있다.이를 활용하여, 원시근 정리를 증명하고자 한다.우선, $p-1 = nk$라고 하면, $X^{p-1}-1=X^{nk}-1=(X^n-1)((X^n)^{k-1} + (X^n)^{k-2} + \\cdot\\cdot\\cdot+X^n + 1)$와 같이 인수분해 할 수 있다.한편, 페르마의 소정리로 부터 $X^{p-1}-1\\equiv 0\\pmod p$은 정확히 $p-1$개의 해를 가짐을 알고있다. 따라서, 다음 주장은 참이 된다.\\[n|p-1이면, \\ X^n-1\\equiv 0 \\pmod p 는 \\ 정확히 \\ n개의 \\ 근을 \\ 가진다.\\]한편, $\\psi(d) = \\sharp[a: \\ 1\\leq a&lt;p \\ \\ and \\ \\ ord_p(a) = d]$ 를 정의하고자 한다. 이를 통해 $ X^n-1\\equiv 0\\pmod p$의 근을 다른 방식을 세어보자.만약 $X=a$가 근이라면, $a^n\\equiv 1 \\pmod p$가 성립하고, 위수의 2번째 성질에 따라 $ord_p(a)|n$이 성립한다. 따라서, 반대로 $n$의 모든 약수 $d_1, \\ d_2, \\ …\\ , \\ d_r$에 대해, $\\psi(d_1) + \\psi(d_2) + \\cdot\\cdot\\cdot + \\psi(d_r)$가 $ X^n-1\\equiv 0\\pmod p$의 근의 개수가 된다.\\[n은 \\ p-1을 \\ 나누고 \\ d_1, \\ d_2, \\ ...\\ , \\ d_r는 \\ n의 \\ 모든 약수라고 하자. \\ 그러면, \\\\ \\psi(d_1) + \\psi(d_2) + \\cdot\\cdot\\cdot + \\psi(d_r) = n \\ 이 \\ 성립한다.\\]마지막으로, $\\sum_{d|N}\\phi(d) = N$임을 통해,귀납적 가정을 사용하여 \\(\\phi = \\psi\\)를 증명하면, 원시근 정리의 증명은 끝이다." }, { "title": "정수론(1) 최대공약수의 새로운 정의", "url": "/posts/%EC%A0%95%EC%88%98%EB%A1%A0(1)-%EC%B5%9C%EB%8C%80%EA%B3%B5%EC%95%BD%EC%88%98%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%A0%95%EC%9D%98/", "categories": "Math, Number Theory", "tags": "Math, Number Theory", "date": "2022-12-10 03:00:00 +0000", "snippet": "1. 시작하기 전에…시작하기 전에, 기본 정수론 용어를 몇가지 정의하고 넘어가고자 한다. $\\mathbb{Z}$를 정수환이라고 정의한다. 즉 $a, b\\in \\mathbb{Z}$인 $a$와 $b$의 덧셈과 곱셈의 결과 $c$는 여전히 $\\mathbb{Z}$의 원소라는 것이다. 즉 $\\mathbb{Z}$가 정수환이라는 것은, 정수를 원소로 하며, 덧셈...", "content": "1. 시작하기 전에…시작하기 전에, 기본 정수론 용어를 몇가지 정의하고 넘어가고자 한다. $\\mathbb{Z}$를 정수환이라고 정의한다. 즉 $a, b\\in \\mathbb{Z}$인 $a$와 $b$의 덧셈과 곱셈의 결과 $c$는 여전히 $\\mathbb{Z}$의 원소라는 것이다. 즉 $\\mathbb{Z}$가 정수환이라는 것은, 정수를 원소로 하며, 덧셈과 곱셈에 닫혀있다는 것이다. 그리고 이 글에서 특별한 표기가 없는 경우, 모든 수는 $\\mathbb{Z}$의 원소로 간주하면 된다. $a$가 $b$를 나눈다는 것, 즉 $a$가 $b$의 약수라는 것은, $a |b$라고 표현하기로 한다. 즉 $a |b$라는 것은, $\\exists c \\in \\mathbb{Z} \\ \\ st. \\ b=ac$이다.2. 최대공약수의 새로운 정의최대공약수라는 것은, 두 수의 공통된 약수 중, 가장 큰 것으로 정의한다. 즉 $d$가 $a$와 $b$의 최대공약수라고 한다면, \\(d=max\\{f: f|a,f|b\\}\\) 를 만족한다는 것이다. 그리고 이를 $d=gcd(a,b)$, 특별한 표기가 없으면, $(a,b)$로 표기하고자 한다.우리는 여기서 만족하지 않고, 최대공약수의 새로운 정의를 도출하고자 한다. 새로운 정의는 다음과 같다.\\(d=min\\{f: f=am+bn\\}\\)최대공약수인데, 정의에 min이 들어간다니, 조금 이상하게 느껴질 수 있다. 그래도 몇가지 예를 통해 받아들일 수는 있을 것이다. $gcd(9, 75)$ =&gt; $3=75\\times1-8\\times9$ $gcd(7, 6)$ =&gt; $1=7\\times1-6\\times1$위와 같이 최대공약수의 새로운 정의가 성립하는 것을 볼 수 있다.3. 새로운 정의의 증명 과정\\(d=min\\{f: f=am+bn\\}\\)$d$가 $a$와 $b$의 최대공약수가 된다는 것을 증명하기 위해선, 다음 세가지 주장을 증명할 필요가 있다.주장 1. \\(\\mathbb{S}=\\{am+bn\\}\\)이 $\\mathbb{Z}$의 부분군이다.주장 2. 부분군 \\(\\mathbb{S}\\subseteq\\mathbb{Z}\\)은 \\(\\{0\\}\\)이거나, $d\\mathbb{Z}$꼴이다.주장 3. \\(d=min\\{f: f=am+bn\\}=(a,b)\\)이다.즉, 1과 2를 통해 \\(\\mathbb{S}=\\{am+bn\\}\\)가 $a$와 $b$의 공약수의 집합임을 증명하고, 3을 통해 min을 취하는게 왜 올바른지 증명할 것이다.4. 증명을 위해 필요한 도구들 Well Ordering Principle(최소원 법칙) $\\emptyset\\ne\\mathbb{A}\\subseteq\\mathbb{Z_{&gt;k}}$이면, $\\exists!a\\in A \\ st. \\ \\forall b \\in A, \\ b \\geq a $ 즉, 공집합이 아닌 정수환의 부분군은 최소 원소를 가지고 있다는 의미. 아르키메데스 원리 $a&gt;0, \\ a,b\\in \\mathbb{R}$일때, $\\exists n\\in\\mathbb{Z} \\ st. \\ na&gt;b$ 실수(정수)를 계속 더하다 보면, 결국 더 커진다는 의미. 나눗셈 정리 $a\\in\\mathbb{Z}, \\ b\\in\\mathbb{Z_{&gt;0}}$일때, $\\exists!q,r\\in\\mathbb{Z} \\ st. 0\\leq r \\lt b \\ and \\ a=bq + r$1과 2는, 그냥 사실로써 받아들여야 한다. 직관적으로도 받아들이기 어렵지 않다.다만, 3, 나눗셈정리는, 1과 2를 통해 증명해볼 수 있다. 간단하게 내용을 설명하자면, 먼저 아르키메데스 원리를 통해 \\(\\mathbb{S}=\\{a-bq\\}\\)가 공집합이 아님을 증명한다. 그다음, 공집합이 아니므로, 최소원의 법칙을 통해 최소원, $r$이 존재함을 알 수 있다. 마지막으로 귀류법을 통해 $0\\leq r \\lt b$임을 증명하면 끝난다.5. 주장 1의 증명어떤 집합이 $\\mathbb{Z}$의 부분군임을 증명하려면, 덧셉에 대해 갇혀있고, 역원과 항등원이 존재함을 보이면 된다. 이는 어렵지 않으니 생략하고자 한다.6. 주장 2의 증명 $\\mathbb{S}$가 \\(\\{0\\}\\)인 경우는 자명하므로 생략. 그러므로, \\(\\mathbb{S}\\neq\\{0\\}\\)인 $\\mathbb{S}$에 대해 $\\mathbb{S}\\cap \\mathbb{Z_{&gt;0}}$과 $\\mathbb{S}\\cap \\mathbb{Z_{&gt;0}}$에 대해 생각해보자. $\\mathbb{S}\\cap \\mathbb{Z_{&gt;0}}=\\emptyset$이면, $\\mathbb{S}$가 부분군이므로, $\\mathbb{S}\\cap \\mathbb{Z_{&gt;0}}=\\emptyset$이 되며 모순이 발생한다. 따라서 $\\mathbb{S}$는 공집합이 아니다. 공집합이 아니므로, 최소원 $d$가 존재한다. 그러면 마지막으로 $\\forall a\\in \\mathbb{S}, \\ \\exists q \\ st. \\ a=dq$를 증명하면 된다. 이는 $a=dq+r \\ (0 \\geq r \\gt d)$일때 $r=0$임을 증명하면 충분하다. $r\\neq0$이면, $d$가 최소원임에 모순이 발생하므로, $a=dq$이다. 끝.7. 주장 3의 증명주장 3을 증명하기 전에, 한가지 먼저 증명해볼 것이 있다. $d|a, \\ d|b \\to d|am+bn$이 성립한다는 것이다. 이는 $a=dx, \\ b=dy$라 두면, $d|d(xm+yn)$임을 통해 쉽게 알 수 있다.주장 3의 핵심 아이디어는, 위에서 증명한 나눗셈 정리를 사용하는 것이다. $a=bq + r \\ (0\\leq r \\lt b)$일때, $(a,b)=(b,r)$를 증명해 볼 것이다. $e=(a,b)$ $d=(b,r)$이라 할 때, $d=e$를 증명하려면, $d|e$, $e|d$임을 증명하면 충분하다. 즉, $d|r$, $e|a$를 증명하면 되는 것이다. 우선, $d|a$, $d|b$이므로, $d|am+bn$이 성립한다. $m=1$, $n=-q$를 대입하면, $d|a-bq=r$이다. $e|d$도 동일하게 증명하면 된다.따라서, 우리는 $a=bq + r \\ (0\\leq r \\lt b)$일때, $(a,b)=(b,r)$임을 알게 되었다. 그렇다면, 이를 활용해서 증명을 끝내보자.$a=bq+r$$b=rq_1+r_1$$r=r_1q_2+r_2$………$r_{n-1}=r_nq_{n+1}+r_{n+1}$, $r_{n+1}=0$위와 같이 나눗셈 정리를 활용하면 나머지가 $0$이 될 때까지 식을 전개할 수 있다. 한편,$(a,b)=(b,r)=(r,r_1) \\ … \\ = (r_n,r_{n+1})=(r_n,0)=r_n$이 됨을 알 수 있다. 따라서, 주장 3을 증명 끝냈고, 왜 min이 필요한지 충분히 설명이 되었다고 생각한다.확장 1. 유클리드 알고리즘최대 공약수의 새로운 정의의 장점은, 공식을 알고리즘화하기 쉽다는 점이다.def euclid(a, b): if a%b == 0: return b else: return euclid(b, a%b) 재귀함수를 사용하면 엄청 간단하게 구현할 수 있다.간단함 뿐만 아니라, 소인수분해를 통해 최대공약수를 계산하는 것보다 훨씬 빠르다. 유클리드 알고리즘의 시간복잡도는 $\\mathbb{O}(log{min(a,b)})$이다. 이는 여기에서 확인해볼 수 있다. 한편, 소인수분해 알고리즘의 시간복잡도는 일반적으로 $\\mathbb{O}(\\sqrt{n})$이라고 한다…확장 2. 선형 방정식한편, 유클리드 알고리즘을 변형하여, $am+bn=(a,b)$의 $m$, $n$의 해까지 구해주는 알고리즘이 존재한다. 이를 확장된 유클리드 알고리즘이라고 부르며, 다음과 같이 구현할 수 있다.def exeuclid(a, b, sp, spp, tp, tpp): if b==0: return f'gcd={a}, m={tpp}, n={spp}' s = spp - sp*int(a/b) t = tpp - tp*int(a/b) return exeuclid(b, a%b, s, sp, t, tp)print(exeuclid(a, b, 1, 0, 0, 1))이러한 알고리즘을 활용하거나, 직접 유클리드 알고리즘을 역으로 거슬러 올라가면서 $m$과 $n$의 값을 구할 수 있다.한편, $am+bn=(a,b)$의 해는 유일할까? 그렇지 않다. 일반 해는 다음과 같다. \\((x_1 + k\\times \\frac{b}{(a,b)}, y_1 - k\\times \\frac{a}{(a,b)})\\)($x_1$과 $y_1$은 $am+bn=(a,b)$의 해)또한, 이를 통해 우변이 $(a, b)$의 배수가 아닌 경우, 해가 존재하지 않음을 도출해볼 수 있을 것이다." }, { "title": "파이썬 코딩의 기술(5) 클래스와 인터페이스", "url": "/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0(5)-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/", "categories": "Book, Python", "tags": "Book Review, Python", "date": "2022-10-01 07:00:00 +0000", "snippet": " 책 파이썬 코딩의 기술을 읽고 정리한 내용입니다.— 5.클래스와 인터페이스 37. 내장 타입을 여러 단계로 내포시키기보다는 클래스를 합성하라 내장 타입(리스트, 딕셔너리, 튜플 등)을 여러 단계 합성시키면, 코드가 복잡해진다.이를 피하기 위해 코드를 여러 클래스로 나누어 복잡도를 낮추고, 확장성을 높일 수 있다.특히 간단한 자료구조...", "content": " 책 파이썬 코딩의 기술을 읽고 정리한 내용입니다.— 5.클래스와 인터페이스 37. 내장 타입을 여러 단계로 내포시키기보다는 클래스를 합성하라 내장 타입(리스트, 딕셔너리, 튜플 등)을 여러 단계 합성시키면, 코드가 복잡해진다.이를 피하기 위해 코드를 여러 클래스로 나누어 복잡도를 낮추고, 확장성을 높일 수 있다.특히 간단한 자료구조의 경우 namedtuple을 활용하면 좋다.```pyfrom collections import namedtupleGrade = namedtuple(‘Grade’, (‘score’, ‘weight’)) class Subject: def init(self): self._grades = []def report_grade(self, score, weight): self._grades.append(Grade(score, weight))def average_grade(self): total, total_weight = 0, 0 for grade in self._grades: total += grade.score * grade.weight total_weight += grade.weight return total / total_weight ``` 그러나 namedtuple의 경우, 디폴트 인자값을 지정할 수 없다는 단점을 지닌다.38. 간단한 인터페이스의 경우 클래스 대신 함수를 받아라def log_missing(): print('키 추가됨') return 0from collections import defaultdictcurrent = {'초록': 12, '파랑': 3}increments = [ ('빨강', 5), ('파랑', 17), ('주황', 9),]result = defaultdict(log_missing, current)for key, amount in increments: result[key] += amount위와 같은 방식으로 함수를 인자로 전달하여, 원하는 부수효과를 얻을 수 있다.class BetterCountMissing: def __init__(self): self.added = 0 def __call__(self): self.added += 1 return 0counter = BetterCountMissing()result = defaultdict(counter, current) # __call__에 의존함for key, amount in increments: result[key] += amount또한 보다 복잡한 효과를 원할 경우, 클래스와 call 메소드를 활용할 수 있다.39. 객체를 제너릭하게 구성하려면 @classmethod를 통한 다형성을 활용하라40. super로 부모 클래스를 초기화하라자식 클래스에서 부모 클래스의 이름을 활용하여 초기화하는 경우 생기는 문제점은, 다중 상속일 경우 부모 클래스의 초기화 순서가 아닌, 클래스의 정의에서 부모 클래스를 나열한 순서에 영향을 받는다는 점에서 오는 혼란 다이아몬드 상속에서 같은 조상의 초기화가 여러번 이루어질 수 있다는 점반면, super를 사용할 경우, mro 순서에 의해 혼란이 사라진다.41. 기능을 합성할 때는 믹스인 클래스를 사용하라믹스인 클래스: 자식 클래스가 사용할 메서드 몇 개만 정의하는 클래스class ToDictMixin: def to_dict(self): return self._traverse_dict(self.__dict__) def _traverse_dict(self, instance_dict): output = {} for key, value in instance_dict.items(): output[key] = self._traverse(key, value) return output def _traverse(self, key, value): if isinstance(value, ToDictMixin): return value.to_dict() elif isinstance(value, dict): return self._traverse_dict(value) elif isinstance(value, list): return [self._traverse(key, i) for i in value] elif hasattr(value, '__dict__'): return self._traverse_dict(value.__dict__) else: return valueclass BinaryTree(ToDictMixin): def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right특히 변경점이 있을 경우 쉽게 오버라이드 할 수 있다는 장점이 있다.class BinaryTreeWithParent(BinaryTree): def __init__(self, value, left=None, right=None, parent=None): super().__init__(value, left=left, right=right) self.parent = parent def _traverse(self, key, value): if (isinstance(value, BinaryTreeWithParent) and key == 'parent'): return value.value # Prevent cycles else: return super()._traverse(key, value)42. 비공개 애트리뷰트보다는 공개 애트리뷰트를 사용하라파이썬의 애트리뷰트에는 공개 애트리뷰트와 비공개 애트리뷰트가 있다.class MyObject: def __init__(self): self.public_field = 5 self.__private_field = 10 def get_private_field(self): return self.__private_fieldfoo = MyObject()print(foo.public_field)print(foo.__private_field) # 에러 발생# 올바른 접근법print(foo.get_private_field)print(foo._MyObject__private_field)비공개 애트리뷰트를 사용하는 것의 단점은, 자식 클래스에서 애트리뷰트의 접근이 바로 되지 않으며 자식 클래스에서 접근을 위해, self._MyObject__private_field 와 같은 식을 사용해야하는데, 이는 클래스의 확장성을 낮춘다.lass MyBaseClass: def __init__(self, value): self.__value = value def get_value(self): return self.__valueclass MyStringClass(MyBaseClass): def get_value(self): return str(super().get_value()) # 변경됨class MyIntegerSubclass(MyStringClass): def get_value(self): return int(self._MyStringClass__value) # 변경되지 않음반면 비공개 애트리뷰트를 사용해야하는 유일한 경우는 하위클래스와의 애트리뷰트의 정의가 충돌이 예상될 때이다.43. 커스텀 컨테이너 타입은 collections.abc를 상속하라기존 파이썬 자료구조를 상속하지 않고 새로운 컨테이너 타입을 만들고 싶다면, collections.abc를 상속해야한다.이를 통해 새로운 컨테이너를 만들때 구현하는것을 빠트린 메소드를 쉽게 안정적으로 찾을 수 있다." }, { "title": "파이썬 코딩의 기술(4) 컴프리헨션과 제너레이터", "url": "/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0(4)-%EC%BB%B4%ED%94%84%EB%A6%AC%ED%97%A8%EC%85%98%EA%B3%BC-%EC%A0%9C%EB%84%88%EB%A0%88%EC%9D%B4%ED%84%B0/", "categories": "Book, Python", "tags": "Book Review, Python", "date": "2022-09-12 07:00:00 +0000", "snippet": " 책 파이썬 코딩의 기술을 읽고 정리한 내용입니다.— 4. 컴프리헨션과 제너레이터 27. map과 filter 대신 컴프리헨션을 사용하라 map과 filter를 사용하는 것보다 더 명확하다. even_squares = [x**2 for x in nums if x % 2 == 0]even_squares_dict = {x: x**2...", "content": " 책 파이썬 코딩의 기술을 읽고 정리한 내용입니다.— 4. 컴프리헨션과 제너레이터 27. map과 filter 대신 컴프리헨션을 사용하라 map과 filter를 사용하는 것보다 더 명확하다. even_squares = [x**2 for x in nums if x % 2 == 0]even_squares_dict = {x: x**2 for x in nums if x % 2 == 0}even_squares_set = {x**2 for x in nums if x % 2 == 0} 28. 컴프리헨션 내부에 제어 하위 식을 세 개 이상 사용하지 말라matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]flat = [x for arr in matrix for x in arr]이와같은 경우는 컴프리헨션을 사용하는 것이 바람직하다.my_lists = [ [[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [1, 2, 3]], [[4, 5, 6], [7, 8, 9]],]flat = [x for sublist1 in my_lists for sublist2 in sublist1 for x in sublist2]flat = []for sublist1 in my_lists: for sublist2 in sublist1: flat.extend(sublist2)컴프리헨션의 내부 제어식이 세 개 이상되면, 차라리 for문이나 도우미함수를 활용하는게 좋다.29. 대입식을 사용해 컴프리헨션 안에서 반복 작업을 피하라stock = { '못': 125, '나사못': 35, '나비너트': 8, '와셔': 24,}order = ['나사못', '나비너트', '클립']def get_batches(count, size): return count // sizefound = {name: get_batches(stock.get(name, 0), 8) for name in order if get_batches(stock.get(name, 0), 8)}found = {name: batches for name in order if (batches := get_batches(stock.get(name, 0), 8))}대입식을 사용함으로서 반복적인 식을 하나의 변수로 간단하게 바꿀 수 있다.한편, 대입식을 컨프리헨션안에 사용하면, 컨프리헨션의 루프 변수가 누출되지 않는다는 장점이 사라진다.반복을 줄이는 목적으로만 대입식을 사용하는 것이 가장 바람직하다.30. 리스트를 반환하기보다는 제너레이터를 사용하라#1. 리스트 버전def index_words(text): result = [] if text: result.append(0) for index, letter in enumerate(text): if letter == ' ': result.append(index + 1) return resultresult = index_words(address)#2. 제너레이터 버전def index_words_iter(text): if text: yield 0 for index, letter in enumerate(text): if letter == ' ': yield index + 1result = list(index_words_iter(address))제너레이터를 활용하면 코드의 잡음을 줄이고 입력이 너무 긴 경우 메모리가 다 소진되는 것을 방지할 수 있다.31. 인자에 대해 이터레이션할 때는 방어적이 돼라제너레이터로 생성된 이터레이터는 이터레이터가 소진이 되는 경우에 대해 무방비해질 수 있다.def normalize(numbers): total = sum(numbers) result = [] for value in numbers: percent = 100 * value / total result.append(percent) return resultclass ReadVisits: def __init__(self, data_path): self.data_path = data_path def __iter__(self): with open(self.data_path) as f: for line in f: yield int(line)#visits = ReadVisits(path)percentages = normalize(visits)print(percentages)이를 해결하기 위해, 위와 같이 이터레이터를 직접 전달하는게 아니라, 제너레이터 컨테이너를 만들어서 sum()함수나 for 루프에서 __iter__를 통해 새로운 이터레이터가 생성되도록 해야한다.또한 이터레이터와 컨테이너를 구별하기 위해, isinstance를 활용하면 된다.32. 긴 리스트 컴프리헨션보다는 제너레이터 식을 사용하라리스트 컴프리헨션의 문제점은 입력 시퀀스와 같은 수의 원소가 들어있는 리스트 인스턴스를 만들어낼 수 있다는 것이다. -&gt; 오버플로우이를 해결하기 위해, 제너레이터 식을 사용할 수 있다.it = (len(x) for x in open('my_file.txt'))roots = ((x, x**0.5) for x in it)또한 위와 같이 두 제너레이터 식을 합성할 수도 있다.33. yield from을 사용해 여러 제너레이터를 합성하라def animate(): for delta in move(4, 5.0): yield delta for delta in pause(3): yield delta for delta in move(2, 3.0): yield deltadef animate_composed(): yield from move(4, 5.0) yield from pause(3) yield from move(2, 3.0)위와 같은 방식으로, yield from 을 사용하면, for 루프를 사용하여 제너레이터를 호출하는 것보다, 훨신 더 간단하고, 성능 좋게 제너레이터를 호출할 수 있다.34. send로 제너레이터에 데이터를 주입라지 말라35. 제너레이터 안에서 throw로 상태를 변화시키지 말라36. 이터레이터나 제너레이터를 다룰 때는 itertools를 사용하라" }, { "title": "도덕의 계보 요약과 해석", "url": "/posts/%EB%8F%84%EB%8D%95%EC%9D%98-%EA%B3%84%EB%B3%B4-%EC%9A%94%EC%95%BD%EA%B3%BC-%ED%95%B4%EC%84%9D/", "categories": "Book, Humanities", "tags": "Book Review, Philosophy, Nietzsche", "date": "2022-09-12 03:18:00 +0000", "snippet": "도덕의 계보- 프리드리히 니체철학적 문제제기의 대부분이 그러하듯, &lt;도덕의 계보&gt;라는 딱딱한 제목을 가지고 있는 이 책은 ‘어떻게 살아야 하는가’에 대한 니체의 생각을 담고 있다.니체는 이 책을 통해 ‘자기자신에 대해 솔직하고 충실한 삶’을 살아야 한다고 이야기한다. 니체는 어떻게 하여 이런 생각을 가지게 되었을까. 쉽지 않은 책이지만, 천...", "content": "도덕의 계보- 프리드리히 니체철학적 문제제기의 대부분이 그러하듯, &lt;도덕의 계보&gt;라는 딱딱한 제목을 가지고 있는 이 책은 ‘어떻게 살아야 하는가’에 대한 니체의 생각을 담고 있다.니체는 이 책을 통해 ‘자기자신에 대해 솔직하고 충실한 삶’을 살아야 한다고 이야기한다. 니체는 어떻게 하여 이런 생각을 가지게 되었을까. 쉽지 않은 책이지만, 천천히 요약하며 니체의 생각을 따라가보도록 하자.책의 제목에서 시작해보도록 한다. 우선 ‘도덕’에 대해 생각해보자. 도덕이란 무엇일까.인간이 지켜야 할 바람직한 행동기준이것이 도덕의 사전적 정의이다. 상당히 모호하다. 바람직함이란 무엇일까…. 선한 행동…? 사회에 이로운 행동..? 순환논리에 불과한 설명이다.도덕이라는 단어는 우리의 일상생활에서 끊임없이 등장하지만 이에 대해 명료하게 정의내리기는 쉽지 않다.여기서 계보학이라는 방법론이 등장한다. 니체는 계보학을 통해 ‘도덕’이라는 단어의 기원부터 현재까지의 발전과정을 연구할 수 있었고 이에 대해 자신의 명료한 견해를 가지게 된다.그에게 도덕이란 두 가지 종류의 대립과정으로 다가온다. 바로 노예도덕과 주인도덕의 대립이다.예를 들어 나폴레옹이라는 역사적 인물을 도덕적으로 판단해야하는 상황을 생각해보자. 선함과 악함을 도덕의 기준으로 생각한다면, 그는 악한 사람이다. 그는 영토확장을 위해 끊임없이 전쟁을 일으켰으며, 그 과정에서 수많은 무고한 사람들을 죽였기 때문이다. 그러나 좋음(탁월함, 능력)과 나쁨(저열함, 비겁함)을 도덕의 기준으로 생각한다면, 뛰어난 리더쉽으로 국가의 이익을 증진한 그는 좋은 사람이다. 많은 위인전에서 그를 다루고 있는 이유도 이러한 이유일 것이다.니체는 첫번째 기준을 노예도덕으로, 두번째 도덕을 주인도덕으로 정의한다. 나폴레옹처럼 강인하고 탁월한 자는 자기자신을 긍정할 줄 안다. 그러한 사람들로부터 ‘좋음’이라는 단어가 나왔다. 반면 그들의 관점에서 보았을때, 힘없고 저열하고 비겁하여 그들에게 지배당하는 사람들이 있었다. 그들로부터 ‘나쁨’이라는 단어가 나왔다.한편, 이들 ‘나쁜’ 사람들은 ‘좋은’ 사람들에 대해 원한과 증오의 감정을 자연스럽게 품게 된다. 그들은 ‘좋은’사람을 힘으로 복수할 수 없기때문에, 그들이 기껏 할 수 있는 일은 ‘좋은’ 사람들을 마음 속으로 원망하고 그들에 대해 나쁘게 생각하고, 이야기하는 것이다. 그들은 이야기 한다. “저들은 힘없는 약한자를 괴롭히는 악한 자이며, 우리는 저들과 달리 본성에 지배받지 않는 지적이고 이성적인 선한자이다!”이렇게하여 지상에 도덕이라는 단어가 모순적인 뜻을 내포하게 되었다. 그리고 두 가지 뜻을 가지고 있다고는 하지만, 현재 상황을 보았을때, 노예도덕이 주인도덕에 대해 승리한 것은 명백하다.어떻게 노예도덕이 승리하였을까. 무력감과 자기기만에 가득 찬 약한 자들은 약함은 자신들의 선택이었고, 약하게 존재함을 공적화한다. 그들은 자신의 약함을 선함으로 포장하고, 자신들을 정의로운 인간으로 만든다. 약한 인간은 정신적인 방법으로 아주 교활하고 교묘하게 강한 인간에 대해 승리를 거둔 것이다. 강한 자들은 그들이 강한 힘을 가진 것에 대해 책임을 지는 모순에 빠진다.니체는 이러한 노예도덕에 대해 강하게 비판한다. 위의 과정에서 인간은 자신의 힘의 작용, 맹수성, 자연스러운 활력을 부자연스러운 것으로, 악한것으로 이해하게 된다. 활동적인 일들은, 안식일, 휴식, 평화와 같은 수동적인 것들로 바뀌었다. 강하게 존재하는 것은 악이되었고, 인간이라는 맹수는 온순한 가축으로 길들여졌다. 인간은 더 선량해지고, 더 천박해지고, 더 하찮아지게 된다.한편, 약한 자들이 자신들을 포장하는데 사용한 ‘정의’라는 단어는 원래 다른 의미를 가지고 있었다. 니체에 따르면, 정의란 ‘모든 것은 변상될 수 있고 변상되어야만 한다’는 원칙을 믿으며 ‘서로 타협하고 조정할 수 있도록 노력(강제)하려는 선한 의지이다.이것은 무슨 말일까. 사람은 사회를 이루고 다른 사람들과 같이 살게 되면서, 서로 상호작용을 한다. 상호작용의 핵심은 ‘약속’이다. 약속을 통해 인간은 예측가능성을 가지게 되었고, 다른 사람을 믿으며, 공동체는 안정적으로 유지가 된다.약속을 지킬 수 있는 인간은, 자기자신에 대해 긍지를 가지고 책임을 질 수 있는 인간이다. 이 주권자로서의 인간으로 부터 ‘양심’이라는 단어가 나왔다. 그러나 모든 인간이 양심을 가질 수 있는 능력을 가진 것은 아니었다.약속을 지킬 능력이 없거나 약속을 망각하는 약한 사람들이다. 약속을 통해 빚을 진 이들 채무자에게, 채권자는 물질적인 형벌을 통해 지배감과 우월감이라는 변상을 받고자 했다. 그는 형벌을 통해 자신의 힘의 작용을 맛볼 수 있었다. 형벌은 ‘모든 것은 변상될 수 있고 변상되어야만 한다’는 원칙 아래 시행되었고, 이는 정의의 작용이었다.이러한 형벌의 정의에 대해 어떤 사람들은 의구심을 가질 것이다. 그들은 이렇게 말할 것이다. “범죄자가 형벌을 받는 이유는 범죄자가 자신의 행동에 대해 책임이 있기 때문이다”라고. 그러나 형벌의 모든 원초적인 모습이 잔인성과 폭력성을 띄고 있었다는 점은 확실하다. 형벌의 절차가 먼저 존재했고, 의미와 목적은 그것에 덛붙여진 것에 불과하다.‘어떤 일의 발생 원인은 그것의 궁극적인 유용성, 실제적인 사용과 목적과 철저히 분리되어있다.’이렇게 말을해도 아직 포기하지 않는 사람들이 있을 것이다. “형벌의 목적은 범죄자에게 자신의 행동은 자신에게 책임이 있다는 것을 각인시켜 죄책감, 양심의 가책, 죄의식을 불러일으켜 더 선한 존재로 교화시키는 것이다”라고. 그러나, 형벌을 받는 범죄자는 그가 받는 형벌이 그 자신이 일으킨 죄와 이름만 다를 뿐이지 본질은 같다는 점을 깨닫는다. (타인에게 피해를 주는 점 등에서). 그에게 형벌은 교화와 같은 복잡한 의미로 다가오지 않는다. 그는 단지 형벌을 통해 욕망을 제어할 수 있게 되고, 다음에는 죄를 더 교묘하게 꾸며야겠다는 영리함을 가지게 되며, 자신에게 형벌을 내리는 권력자에게 공포심을 가지게 된다. 이 것이 형벌의 효과이자 본질이자 모든 것이다.그렇다면 ‘죄의식’이라는 개념은 도대체 어디서 나온 것일까. 공동체가 강해져 국가가 형성되고 더 강해진 권력아래 형벌과 법을 통해 약한 인간들은 민중으로 길들여진다. 그들은 힘으로 국가에 대항할 수 없기에, 그들 내면의 야수성은 그들 자신의 내면으로 향한다. 즉 형벌을 통해 고통받을때 그들은 형벌의 원인을 자신의 내부에서 찾는다. 이것이 죄의식이자, 양심의 가책의 유래이다.이 죄의식의 개념은, 민중을 ‘도덕화’하는데 천재적인 수완을 가지고 있는 그리스도에 의해 열매를 맺는다. 죄의식을 가지고 살아가고 있는 민중 앞에서, 그는 그들의 죄를 모두 떠받고자 십자가에 매달린다. 죄를 짓고 있는 그들 앞에 신이 스스로 그들을 구원하고자 목숨을 바친것이다! 그들은 그에게 구원받았지만, 역설적으로 상환할 수 없는 영원한 빚을 지게 된다. 이것이 원죄의 유래이다. 이 상환 불가능한 원죄는, 민중을 형벌의 고통보다 더 강하게 짓누른다. 결국 민중은 자가자신을 부정하게 되고, 태어났을때부터 영원한 죄를 지고 있으며, 자신의 본성을 더러운것으로 인식하게 된다. 민중은 더 비이기적이며 더 선한 존재가 되는 것이다.한편, 그리스도의 피를 이어받은 성직자는 이와 같은 흐름을 강화하고자 노력했다. 그것은 그의 본성(힘)의 자연스러운 작용이었다.그는 국가와 권력의 지배아래 삶의 패배감과 퇴화를 온 몸으로 느끼고 있는 민중들의 구원자이자, 의사이자, 목자가 되고자 한다. 그럼으로써 그는 자신의 무리를 형성하고, 보존하고, 확장하여 자신의 권력과 힘의 작용을 맛볼 수 있었다.그는 의사였지만, 그의 치료방식은 참으로 잔인하고 교활했다. 그는 고통받는 자의 고통을 진정시키는 동시에 상처에 독을 뿌렸다. 그는 고통받는 자의 원한을 강한 자들로부터 자신의 내면으로 돌려놓는다.고통받는 자들이 원한과 복수심을 가지는 이유는, 생리적으로 자신의 감정을 배출하여 고통을 마비시키려는 것이다. 즉 고통의 원인과 책임을 찾는 것이다. 여기서 금욕주의적 성직자는, 그들에게 “너만이 그것에 책임이 있다”라고 말하며 원한과 책임의 방향을 내부로 전환시킨다. 고통의 원인을 찾은 민중은 병자에서 죄인이 된다. 그들은 자신의 죄를 찾는 것을 즐기게 되며, 역설적으로 더 많은 고통을 바라게 된다. ‘종교는 지상에 만연한 생리적 장애의 감정의 치료법이다.’또한 그는 작은 기쁨들을 처방한다. 선행, 선물, 배려, 이웃사랑을 강조하며, 무리속에서 민중이 자신의 작은 권력(힘)의 작용을 맛볼 수 있는 쾌감을 선사한다. 또한 생명력, 야수성, 인간 본성의 자연성을 부정하며 비이기적이고 나약함을 최고의 선으로 만듦으로써 도덕적 자위행위의 기회를 선사한다.니체는 ‘인간은 의욕하지 않기 보다는 차라리 무를 의욕한다’라고 말한다. 인간은 자신의 삶에서 고통 뿐만아니라 모든 것의 의미를 찾는다. 금욕주의적 이상을 통해 인간은 신과 선, 그리고 악(죄)이라는 삶의 의미를 가지게 되었다. 인간은 금욕주의를 통해 드디어 의미를 갖고 무언가를 의욕할 수 있게 된 것이다. 우리 인간은 무를 의욕하게 되었다.마지막으로, 니체는 과학의 등장으로 금욕주의적 가치가 붕괴되고 있는 현 상황에서 인간이라는 연극의 다음 장을 예고한다. 그는 과학이라는 학문은 ‘금욕주의적 이상에 대립하는 것이 아니라 오히려 그것의 가장 새롭고 고귀한 형식’이라고 말한다. 금욕주의적 이상의 핵심이자 잔여물인 진리(의미)를 향한 의지를 똑같이 과학 안에서도 발견하는 것이다. 즉 금욕주의라는 가치가 붕괴될 미래에서, 인간은 최종적으로 ‘진리를 향한 인간의 의지란 무엇인가’라는 질문을 던지게 될 것이란 것이다.여기까지가 책에대한 간단한 요약이다. 핵심을 정리해보자.모든 것은 힘의 작용이자 충돌세상에는 수많은 ‘힘’이 존재한다. 그리고 각각의 ‘힘’들은 제자신을 억압하는 수많은 다른 힘들을 넘어서서 더 높은 곳으로 나아가고자 한다. 이 과정에서 수많은 힘들이 작용하고 충돌하면서, 사회가 변하며 새로운 제도와 관념, 가치등이 생긴다. 그렇다고 해서 이 변화과정이 진보를 의미하는 것은 아니다. 다만 더 강한 힘(사람, 제도, 관념, 가치)가 더 약한 힘(사람, 제도, 관념, 가치)을 지배하고, 새롭게 등장하는 것일 뿐이다. 위에서 책을 요약하면서 몇번 언급한 ‘힘(권력)의 작용을 즐긴다’도 이러한 맥락에서 등장한 것이다. 힘의 작용은 ‘좋은’사람 뿐만 아니라 ‘나쁜’사람도 모두 가지고 있는 인간의 본성이자 만물의 작용 원리이다.문제는 이러한 힘의 작용이, ‘좋은’사람이 ‘나쁜’사람을 짓밟고 강림했듯이, 또는 ‘선한’사람이 인간 자신을 가축으로 길들였듯이 진보적인 방향으로는 쉽게 작용하지 않는다는 점이다. 니체는 이러한 고삐 풀린 힘의 작용을 ‘힘에의 의지’로 바꾸어야 한다고 말한다. 힘에의 의지란 살아남아야만 하는 생명의 맹목적인 욕망을 넘어서서, 자신의 삶을 남의 힘이 아니라 자신의 힘으로 살고자하는 현실에서의 삶의 의지를 의미한다. 자신의 삶의 ‘주인’이 되고자 하는 의지이다. 다만 ‘힘에의 의지’는 힘을 통해 ‘약한 사람’을 짓밟으라는 것이 아니다. ‘힘에의 의지’란, 자기보다 더 ‘강한 사람’을 넘어서려고 하는 의지를 말하는 것이다. 여기서 생기는 고통은 오히려 나를 성장시키기 때문에 고통을 즐겁게 받아들이면서 이러한 힘을 마음껏 추구하라는 것이다.자기자신에 대해 솔직하고 충실한 삶결국 돌고돌아 결론으로 왔다. 결국 핵심은 ‘자기자신에 대해 솔직하고 충실한 삶’ 을 살자는 것이다. 타인이 인위적으로 정한 도덕 등의 가치에 얽매이지 않고, 자기자신만의 가치를 창출하려고 꾸준히 노력해야한다. 이는 항상 더 위를 바라보며, ‘적극적’이고 ‘창조적’인 삶을 추구하면서도, 개인의 인격 발달과 전체 인류의 고양을 위한 영웅적이고도 엄격한 자기 규율과 자아 극복이 중심이 되는 삶이다." }, { "title": "파이썬 코딩의 기술(2) 리스트와 딕셔너리", "url": "/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0(2)-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC/", "categories": "Book, Python", "tags": "Book Review, Python", "date": "2022-09-11 06:37:00 +0000", "snippet": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다.—2. 리스트와 딕셔너리11. 시퀀스를 슬라이싱하는 방법을 배워라a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']first_twenty = a[:20]last_twenty = a[-20:]# a[20] 또는 a[-20]는 에러슬라이싱은 리스트의 인덱스 범위를 넘어가도 상...", "content": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다.—2. 리스트와 딕셔너리11. 시퀀스를 슬라이싱하는 방법을 배워라a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']first_twenty = a[:20]last_twenty = a[-20:]# a[20] 또는 a[-20]는 에러슬라이싱은 리스트의 인덱스 범위를 넘어가도 상관이 없다.이를 통해 시퀀스의 최대 길이를 조절할 수 있다.리스트를 슬라이싱 한 결과는 완전히 새로운 리스트이다.대입에 슬라이스를 사용하면 지정한 범위에 들어있는 원소를 변경한다. 슬라이스의 길이와 대입하는 배열의 길이는 상관이 없다.12. 스트라이드와 슬라이스를 한 식에 함께 사용하지 말라스트라이드는 리스트[시작:끝:증가값]으로 증가값을 지정하는 것을 뜻한다.증가값까지 활용하여 리스트를 인덱싱하면 코드 밀도가 너무 높아서 가독성이 떨어진다.13. 슬라이싱보다는 나머지를 모두 잡아내는 언패킹을 사용하라#car_ages = [0, 9, 3, 1, 2, 53, 2, 12, 9]#first = car_ages[0]#others = car_ages[1:-1]#last = car_ages[-1]first, *others, last = car_ages#*all = car_ages 은 에러를 일으킨다.인덱스로 인한 오류를 없앨 수 있고, 시각적 잡음이 적다.다만 별표 식을 두 개 이상 쓸 수 없다.14. 복잡한 기준을 사용해 정렬할 때는 key 파라미터를 사용하라sort() 함수의 key 파라미터에 lambda 함수를 정의하여 특정한 기준으로 정렬할 수 있다.또한 sort() 함수는 tuple의 앞의 원소부터 순차적으로 정렬의 기준점으로 삼기 때문에 이를 활용하여 여러 원소를 정렬의 기준으로 삼을 수 있다.숫자값의 경우 - 연산을 통해 정렬 방향을 혼합할 수 있다.파이썬은 stable sort를 지원한다. -&gt; 다른 기준으로 여러번 sort()를 조합하여 여러가지 기준을 혼합하여 정렬을 할 수 있다.15. 딕셔너리 삽입 순서에 의존할 때는 조심하라16. in을 사용하고 딕셔너리 키가 없을 때 KeyError를 처리하기보다는 get을 사용하라 딕셔너리의 value가 간단한 경우 if key not in counters: counters[key] = 0 counters[key] += 1 if key in counters: counters[key] += 1 else: counters[key] = 1 try: counters[key] += 1 except KeyError: counters[key] = 1 #get을 사용할 경우 count = counters.get(key, 0) counters[key] = count + 1 딕셔너리의 값이 복잡한 경우 votes = { '바게트': ['철수', '순이'], '치아바타': ['하니', '유리'], } key = '브리오슈' who = '단이' if key in votes: names = votes[key] else: votes[key] = names = [] names.append(who) try: names = votes[key] except KeyError: votes[key] = names = [] names.append(who) #get을 사용할 경우 if (names := votes.get(key)) is None: votes[key] = names = [] names.append(who) 한편, setdefault() 함수를 쓰면 더 간단해진다.names = votes.setdefault(key, []).append(who)그러나 setdefault라는 이름 때문에 가독성이 떨어지고, 2번째 인자로 전달되는 기본값을 매번 새로 만들어야하기에 성능이 저하될 수 있다.17. 내부 상태에서 원소가 없는 경우를 처리할 때는 setdefault보다 defaultdict를 사용하라from collections import defaultdictclass Visits: def __init__(self): self.data = defaultdict(set) def add(self, country, city): self.data[country].add(city)18. __missing__을 사용해 키에 따라 다른 디폴트 값을 생성하는 방법을 알아두라" }, { "title": "파이썬 코딩의 기술(3) 함수", "url": "/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0(3)-%ED%95%A8%EC%88%98/", "categories": "Book, Python", "tags": "Book Review, Python", "date": "2022-09-11 06:37:00 +0000", "snippet": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다.—3. 함수19. 함수가 여러 값을 반환하는 경우 절대로 네 값 이상을 언패킹하지 말라함수의 값을 언패킹할 때 변수가 네 개 이상 나오면 실수하기 쉽다.20. None을 반환하기보다는 예외를 발생시켜라특별한 의미를 표시하는 None을 반환하는 함수를 이용하면, 다른 값(0 또는 [] 등등)과 None...", "content": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다.—3. 함수19. 함수가 여러 값을 반환하는 경우 절대로 네 값 이상을 언패킹하지 말라함수의 값을 언패킹할 때 변수가 네 개 이상 나오면 실수하기 쉽다.20. None을 반환하기보다는 예외를 발생시켜라특별한 의미를 표시하는 None을 반환하는 함수를 이용하면, 다른 값(0 또는 [] 등등)과 None을 구별하기 힘들어진다.None 대신 예외를 발생시켜서 예외처리를 해주면 된다.21. 변수 영역과 클로저의 상호작용 방식을 이해하라코드에서 어떤 변수를 참조할 때, 파이썬 인터프리터는 이를 위해 다음 순서로 영역을 뒤진다. 현재 함수의 영역 현재 함수를 둘러싼 영역 현재 코드가 들어있는 모듈의 영역(전역 영역) 내장 영역(len, str 등이 있는 영역)그러나, 코드에서 변수에 값을 대입하는 것은 다른 방식으로 작동한다.변수가 현재 영역에 이미 정의되어 있지 않다면, 파이선은 변수를 새로 정의하는 것으로 판단한다.따라서 똑같은 이름의 변수가 2개 생기게 된다.def sort_priority2(numbers, group): found = False def helper(x): if x in group: found = True # 새로운 변수 found가 helper() 함수 내부에서 정의된다. return (0, x) return (1, x) numbers.sort(key=helper) return found22. 변수 위치 인자를 사용해 시각적인 잡음을 줄여라함수 정의에서 *args를 통해 가변위치 기반 인자를 받을 수 있다. 즉 여러개의 인자를 하나의 tuple로 패킹할 수 있다. 이미 값이 시퀀스인 경우, *를 통해 시퀀스를 언패킹한후, 가변인자를 받는 함수에게 전달할 수 있다.제네레이터에 *연산자를 사용하면 메모리를 많이 소비할 수 있다.23. 키워드 인자로 선택적인 기능을 제공하라위치기반 인자는 키워드 인자보다 항상 앞에 지정해야 한다.함수 정의에서 **kwargs를 통해 키워드 인자를 딕셔너리로 패킹할 수 있다. **연산을 통해 딕셔너리에 있는 값을 함수에 키워드 인자로 전달할 수 있다.키워드인자는 함수 호출의 의미를 명확하게 보여주고 인자의 디폴트값을 정할 수 있고 하위 호완성을 제공한다.24. None과 독스트링을 사용해 동적인 디폴트 인자를 지정하라디폴트 인자가 동적인 경우, 함수의 정의에서 한번만 초기화되기 때문에 오류가 발생할 수 있다.def decode(data, default={}): try: return json.loads(data) except ValueError: return defaultfoo = decode('잘못된 데이터')foo['stuff'] = 5bar = decode('또 잘못된 데이터')bar['meep'] = 125. 위치로만 인자를 지정하게 하거나 키워드로만 인자를 지정하게 해서 함수 호출을 명확하게 만들라 기호는 위치 인자의 마지막과 키워드만 사용하는 인자의 시작을 구분해준다./ 기호는 위치로만 지정하는 인자의 끝을 표시한다.이 두 기호의 사이에는 두 가지 방식의 인자가 들어올 수 있다.이를 통해 함수의 안정성을 강화할 수 있다. def safe_division_d(numerator, denominator, /, *, ignore_overflow=False, ignore_zero_division=False): try: return numerator / denominator except OverflowError: if ignore_overflow: return 0 else: raise except ZeroDivisionError: if ignore_zero_division: return float('inf') else: raise 26. functools.wrap을 사용해 함수 데코레이터를 정의하라데코레이터를 통해 함수를 변경하지 않고 감쌈을 통해 추가 구현을 해줄 수 있다.그러나 데코레이터를 사용하면 인트로스펙션을 생성하는 도구가 잘못 작동할 수 있기때문에, functools.wraps를 추가로 사용해줘야 한다.from functools import wrapsdef trace(func): @wraps(func) def wrapper(*args, **kwargs): result = func(*args, **kwargs) print(f'{args!r} -&gt; {result!r}') return result return wrapper@tracedef fibonacci(n): ..." }, { "title": "파이썬 코딩의 기술(1) 파이썬답게 생각하기", "url": "/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%94%A9%EC%9D%98-%EA%B8%B0%EC%88%A0(1)-%ED%8C%8C%EC%9D%B4%EC%8D%AC%EB%8B%B5%EA%B2%8C-%EC%83%9D%EA%B0%81%ED%95%98%EA%B8%B0/", "categories": "Book, Python", "tags": "Book Review, Python", "date": "2022-09-05 13:20:00 +0000", "snippet": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다. 1장. 파이썬 답게 생각하기1. 사용중인 파이썬의 버전을 알아두라python3 --version2. PEP 8 스타일 가이드를 따르라딕셔너리에서 키와 코론 사이에 공백을 넣지 않고, 콜론과 값 사이에 스페이스를 하나 넣는다.함수, 변수, 애트리뷰트는 lowercase_underscore비공개 인스...", "content": " 책 파이선 코딩의 기술을 읽고 정리한 내용입니다. 1장. 파이썬 답게 생각하기1. 사용중인 파이썬의 버전을 알아두라python3 --version2. PEP 8 스타일 가이드를 따르라딕셔너리에서 키와 코론 사이에 공백을 넣지 않고, 콜론과 값 사이에 스페이스를 하나 넣는다.함수, 변수, 애트리뷰트는 lowercase_underscore비공개 인스턴스 애트리뷰트는 __lowercase_underscore클래스는 CapitalizedWord상수는 ALL_CAPS모듈을 임포트할 때 절대경로를 사용if not something: #if len(something) == 0: 대신 3. bytes와 str의 차이를 알아두라 파일을 불러와 읽고 쓸 때도 구별해야 함 a = b'h\\x65llo'b = 'a\\u0300 propos'c = a.decode()d = b.encode() 4. C 스타일 형식 문자열을 str.format과 쓰기보다는 f-문자열을 통한 인터폴레이션을 사용하라f_string = f'{key:&lt;10} = {value:.2f}'c_tuple = '%-10s = %.2f' % (key, value)c_dict = '%(key)-10s = %(value).2f' % {'key': key, 'value': value}str_args = '{:&lt;10} = {:.2f}'.format(key, value)str_kw = '{key:&lt;10} = {value:.2f}'.format(key=key, value=value)5. 복잡한 식을 쓰는 대신 도우미 함수를 작성하라식이 복잡해지면 식을 더 작은 조각으로 나눠서 로직을 도우미 함수로 옴길 지 고려해야 한다.코드를 줄여 쓰는 것보다 가독성을 좋게 하는 것이 더 가치 있다.6. 인덱스를 사용하는 대신 대입을 사용해 데이터를 언팩킹하라인덱스를 사용하는 대신 더 명확한 코드를 작성할 수 있다.t = ('감자칩', 140)name, value = t7. range보다는 enumerate를 사용하라enumerate를 통해 for문에서 더 간단하게 언패킹할 수 있다.8. 여러 이터레이터에 대해 나란히 루프를 수행하려면 zip를 사용하라names = ['Cecilia', '남궁민수', '毛泽东']counts = [len(n) for n in names]print(counts)longest_name = Nonemax_count = 0for i in range(len(names)): count = counts[i] if count &gt; max_count: longest_name = names[i] max_count = countprint(longest_name)longest_name = Nonemax_count = 0for name, count in zip(names, counts): if count &gt; max_count: longest_name = name max_count = countprint(longest_name)zip()에 들어간 두 배열의 길이가 다를 경우 더 짧은 배열의 마지막 인덱스까지 값을 반환한다.9. for 나 while 루프 뒤에 else 블록을 사용하지 말라else블록은 루프가 정상적으로 끝까지 실행되었을 때 실행된다.하지만 이는 루프의 의미를 복잡하게 만드므로 사용하지 말아야 한다.10. 대입식을 사용해 반복을 피하라대입식(assignment expression)을 통해 변수에 값을 대입함과 동시에 변수를 사용할 수 있다.if (count := foo(something)) &gt; 3: print('do something')또한 파이썬에 switch/case 가 없어서 코드가 복잡해지는 현상을 막을 수 있다.if count &gt;= 2: pieces = slice_bananas(count) to_enjoy = make_smoothies(pieces)else: count = fresh_fruit.get('사과', 0) if count &gt;= 4: to_enjoy = make_cider(count) else: count = fresh_fruit.get('레몬', 0) if count: to_enjoy = make_lemonade(count) else: to_enjoy = '아무것도 없음'if (count := fresh_fruit.get('바나나', 0)) &gt;= 2: pieces = slice_bananas(count) to_enjoy = make_smoothies(pieces)elif (count := fresh_fruit.get('사과', 0)) &gt;= 4: to_enjoy = make_cider(count)elif count := fresh_fruit.get('레몬', 0): to_enjoy = make_lemonade(count)else: to_enjoy = '아무것도 없음'그리고 비슷한 방법으로 do/while 또한 대체할 수 있다." }, { "title": "첫 글", "url": "/posts/%EC%B2%AB-%EA%B8%80/", "categories": "Blog", "tags": "Test, Hello World", "date": "2022-09-05 03:18:00 +0000", "snippet": "첫 글Hello World!", "content": "첫 글Hello World!" } ]
